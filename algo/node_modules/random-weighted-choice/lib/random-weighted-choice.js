"use strict";

var randomWeightedChoice = function randomWeightedChoice(table) // seems fine, hard to tune
{
  var temperature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
  var randomFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.random;
  var influence = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;

  var T = (temperature - 50) / 50;
  var nb = table.length;
  if (!nb) {
    return null;
  }

  var total = table.reduce(function (previousTotal, element) {
    return previousTotal + element.weight;
  }, 0);

  var avg = total / nb;

  // Compute amplified urgencies (depending on temperature)
  var ur = {};
  var urgencySum = table.reduce(function (previousSum, element) {
    var id = element.id,
        weight = element.weight;

    var urgency = weight + T * influence * (avg - weight);
    if (urgency < 0) urgency = 0;
    ur[id] = (ur[id] || 0) + urgency;
    return previousSum + urgency;
  }, 0);

  var currentUrgency = 0;
  var cumulatedUrgencies = {};
  Object.keys(ur).forEach(function (id) {
    currentUrgency += ur[id];
    cumulatedUrgencies[id] = currentUrgency;
  });

  if (urgencySum <= 0) return null; // No weight given
  // Choose
  var choice = randomFunction() * urgencySum;
  var ids = Object.keys(cumulatedUrgencies);
  for (var i = 0; i < ids.length; i++) {
    var id = ids[i];
    var urgency = cumulatedUrgencies[id];
    if (choice <= urgency) {
      return id;
    }
  }
};

module.exports = randomWeightedChoice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yYW5kb20td2VpZ2h0ZWQtY2hvaWNlLmpzIl0sIm5hbWVzIjpbInJhbmRvbVdlaWdodGVkQ2hvaWNlIiwidGFibGUiLCJ0ZW1wZXJhdHVyZSIsInJhbmRvbUZ1bmN0aW9uIiwiTWF0aCIsInJhbmRvbSIsImluZmx1ZW5jZSIsIlQiLCJuYiIsImxlbmd0aCIsInRvdGFsIiwicmVkdWNlIiwicHJldmlvdXNUb3RhbCIsImVsZW1lbnQiLCJ3ZWlnaHQiLCJhdmciLCJ1ciIsInVyZ2VuY3lTdW0iLCJwcmV2aW91c1N1bSIsImlkIiwidXJnZW5jeSIsImN1cnJlbnRVcmdlbmN5IiwiY3VtdWxhdGVkVXJnZW5jaWVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJjaG9pY2UiLCJpZHMiLCJpIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSx1QkFBdUIsU0FBdkJBLG9CQUF1QixDQUMzQkMsS0FEMkIsRUFJYjtBQUNYO0FBQUEsTUFISEMsV0FHRyx1RUFIVyxFQUdYO0FBQUEsTUFGSEMsY0FFRyx1RUFGY0MsS0FBS0MsTUFFbkI7QUFBQSxNQURIQyxTQUNHLHVFQURTLENBQ1Q7O0FBQ0gsTUFBTUMsSUFBSSxDQUFDTCxjQUFjLEVBQWYsSUFBcUIsRUFBL0I7QUFDQSxNQUFNTSxLQUFLUCxNQUFNUSxNQUFqQjtBQUNBLE1BQUksQ0FBQ0QsRUFBTCxFQUFTO0FBQ1AsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBTUUsUUFBUVQsTUFBTVUsTUFBTixDQUNaLFVBQUNDLGFBQUQsRUFBZ0JDLE9BQWhCO0FBQUEsV0FBNEJELGdCQUFnQkMsUUFBUUMsTUFBcEQ7QUFBQSxHQURZLEVBRVosQ0FGWSxDQUFkOztBQUtBLE1BQU1DLE1BQU1MLFFBQVFGLEVBQXBCOztBQUVBO0FBQ0EsTUFBTVEsS0FBSyxFQUFYO0FBQ0EsTUFBTUMsYUFBYWhCLE1BQU1VLE1BQU4sQ0FBYSxVQUFDTyxXQUFELEVBQWNMLE9BQWQsRUFBMEI7QUFBQSxRQUNoRE0sRUFEZ0QsR0FDakNOLE9BRGlDLENBQ2hETSxFQURnRDtBQUFBLFFBQzVDTCxNQUQ0QyxHQUNqQ0QsT0FEaUMsQ0FDNUNDLE1BRDRDOztBQUV4RCxRQUFJTSxVQUFVTixTQUFTUCxJQUFJRCxTQUFKLElBQWlCUyxNQUFNRCxNQUF2QixDQUF2QjtBQUNBLFFBQUlNLFVBQVUsQ0FBZCxFQUFpQkEsVUFBVSxDQUFWO0FBQ2pCSixPQUFHRyxFQUFILElBQVMsQ0FBQ0gsR0FBR0csRUFBSCxLQUFVLENBQVgsSUFBZ0JDLE9BQXpCO0FBQ0EsV0FBT0YsY0FBY0UsT0FBckI7QUFDRCxHQU5rQixFQU1oQixDQU5nQixDQUFuQjs7QUFRQSxNQUFJQyxpQkFBaUIsQ0FBckI7QUFDQSxNQUFNQyxxQkFBcUIsRUFBM0I7QUFDQUMsU0FBT0MsSUFBUCxDQUFZUixFQUFaLEVBQWdCUyxPQUFoQixDQUF3QixVQUFDTixFQUFELEVBQVE7QUFDOUJFLHNCQUFrQkwsR0FBR0csRUFBSCxDQUFsQjtBQUNBRyx1QkFBbUJILEVBQW5CLElBQXlCRSxjQUF6QjtBQUNELEdBSEQ7O0FBS0EsTUFBSUosY0FBYyxDQUFsQixFQUFxQixPQUFPLElBQVAsQ0EvQmxCLENBK0IrQjtBQUNsQztBQUNBLE1BQU1TLFNBQVN2QixtQkFBbUJjLFVBQWxDO0FBQ0EsTUFBTVUsTUFBTUosT0FBT0MsSUFBUCxDQUFZRixrQkFBWixDQUFaO0FBQ0EsT0FBSyxJQUFJTSxJQUFJLENBQWIsRUFBZ0JBLElBQUlELElBQUlsQixNQUF4QixFQUFnQ21CLEdBQWhDLEVBQXFDO0FBQ25DLFFBQU1ULEtBQUtRLElBQUlDLENBQUosQ0FBWDtBQUNBLFFBQU1SLFVBQVVFLG1CQUFtQkgsRUFBbkIsQ0FBaEI7QUFDQSxRQUFJTyxVQUFVTixPQUFkLEVBQXVCO0FBQ3JCLGFBQU9ELEVBQVA7QUFDRDtBQUNGO0FBQ0YsQ0EvQ0Q7O0FBaURBVSxPQUFPQyxPQUFQLEdBQWlCOUIsb0JBQWpCIiwiZmlsZSI6InJhbmRvbS13ZWlnaHRlZC1jaG9pY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByYW5kb21XZWlnaHRlZENob2ljZSA9IChcbiAgdGFibGUsXG4gIHRlbXBlcmF0dXJlID0gNTAsIC8vIGluIFswLDEwMF0sIDUwIGlzIG5ldXRyYWxcbiAgcmFuZG9tRnVuY3Rpb24gPSBNYXRoLnJhbmRvbSxcbiAgaW5mbHVlbmNlID0gMiAvLyBzZWVtcyBmaW5lLCBoYXJkIHRvIHR1bmVcbikgPT4ge1xuICBjb25zdCBUID0gKHRlbXBlcmF0dXJlIC0gNTApIC8gNTA7XG4gIGNvbnN0IG5iID0gdGFibGUubGVuZ3RoO1xuICBpZiAoIW5iKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCB0b3RhbCA9IHRhYmxlLnJlZHVjZShcbiAgICAocHJldmlvdXNUb3RhbCwgZWxlbWVudCkgPT4gcHJldmlvdXNUb3RhbCArIGVsZW1lbnQud2VpZ2h0LFxuICAgIDBcbiAgKTtcblxuICBjb25zdCBhdmcgPSB0b3RhbCAvIG5iO1xuXG4gIC8vIENvbXB1dGUgYW1wbGlmaWVkIHVyZ2VuY2llcyAoZGVwZW5kaW5nIG9uIHRlbXBlcmF0dXJlKVxuICBjb25zdCB1ciA9IHt9O1xuICBjb25zdCB1cmdlbmN5U3VtID0gdGFibGUucmVkdWNlKChwcmV2aW91c1N1bSwgZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IHsgaWQsIHdlaWdodCB9ID0gZWxlbWVudDtcbiAgICBsZXQgdXJnZW5jeSA9IHdlaWdodCArIFQgKiBpbmZsdWVuY2UgKiAoYXZnIC0gd2VpZ2h0KTtcbiAgICBpZiAodXJnZW5jeSA8IDApIHVyZ2VuY3kgPSAwO1xuICAgIHVyW2lkXSA9ICh1cltpZF0gfHwgMCkgKyB1cmdlbmN5O1xuICAgIHJldHVybiBwcmV2aW91c1N1bSArIHVyZ2VuY3k7XG4gIH0sIDApO1xuXG4gIGxldCBjdXJyZW50VXJnZW5jeSA9IDA7XG4gIGNvbnN0IGN1bXVsYXRlZFVyZ2VuY2llcyA9IHt9O1xuICBPYmplY3Qua2V5cyh1cikuZm9yRWFjaCgoaWQpID0+IHtcbiAgICBjdXJyZW50VXJnZW5jeSArPSB1cltpZF07XG4gICAgY3VtdWxhdGVkVXJnZW5jaWVzW2lkXSA9IGN1cnJlbnRVcmdlbmN5O1xuICB9KTtcblxuICBpZiAodXJnZW5jeVN1bSA8PSAwKSByZXR1cm4gbnVsbDsgLy8gTm8gd2VpZ2h0IGdpdmVuXG4gIC8vIENob29zZVxuICBjb25zdCBjaG9pY2UgPSByYW5kb21GdW5jdGlvbigpICogdXJnZW5jeVN1bTtcbiAgY29uc3QgaWRzID0gT2JqZWN0LmtleXMoY3VtdWxhdGVkVXJnZW5jaWVzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpZCA9IGlkc1tpXTtcbiAgICBjb25zdCB1cmdlbmN5ID0gY3VtdWxhdGVkVXJnZW5jaWVzW2lkXTtcbiAgICBpZiAoY2hvaWNlIDw9IHVyZ2VuY3kpIHtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZG9tV2VpZ2h0ZWRDaG9pY2U7XG4iXX0=
{"ast":null,"code":"\"use strict\";\n\nvar randomWeightedChoice = function randomWeightedChoice(table) // seems fine, hard to tune\n{\n  var temperature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  var randomFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.random;\n  var influence = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n  var T = (temperature - 50) / 50;\n  var nb = table.length;\n\n  if (!nb) {\n    return null;\n  }\n\n  var total = table.reduce(function (previousTotal, element) {\n    return previousTotal + element.weight;\n  }, 0);\n  var avg = total / nb; // Compute amplified urgencies (depending on temperature)\n\n  var ur = {};\n  var urgencySum = table.reduce(function (previousSum, element) {\n    var id = element.id,\n        weight = element.weight;\n    var urgency = weight + T * influence * (avg - weight);\n    if (urgency < 0) urgency = 0;\n    ur[id] = (ur[id] || 0) + urgency;\n    return previousSum + urgency;\n  }, 0);\n  var currentUrgency = 0;\n  var cumulatedUrgencies = {};\n  Object.keys(ur).forEach(function (id) {\n    currentUrgency += ur[id];\n    cumulatedUrgencies[id] = currentUrgency;\n  });\n  if (urgencySum <= 0) return null; // No weight given\n  // Choose\n\n  var choice = randomFunction() * urgencySum;\n  var ids = Object.keys(cumulatedUrgencies);\n\n  for (var i = 0; i < ids.length; i++) {\n    var id = ids[i];\n    var urgency = cumulatedUrgencies[id];\n\n    if (choice <= urgency) {\n      return id;\n    }\n  }\n};\n\nmodule.exports = randomWeightedChoice;","map":{"version":3,"sources":["../src/random-weighted-choice.js"],"names":["randomWeightedChoice","temperature","randomFunction","Math","random","influence","T","nb","table","total","previousTotal","element","avg","ur","urgencySum","id","weight","urgency","previousSum","currentUrgency","cumulatedUrgencies","Object","choice","ids","i","module"],"mappings":";;AAAA,IAAMA,oBAAAA,GAAuB,SAAvBA,oBAAuB,CAAA,KAAA,EAIb;AACX;AAAA,MAHHC,WAGG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAHW,EAGX;AAAA,MAFHC,cAEG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAFcC,IAAAA,CAAKC,MAEnB;AAAA,MADHC,SACG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADS,CACT;AACH,MAAMC,CAAAA,GAAI,CAACL,WAAAA,GAAD,EAAA,IAAV,EAAA;AACA,MAAMM,EAAAA,GAAKC,KAAAA,CAAX,MAAA;;AACA,MAAI,CAAJ,EAAA,EAAS;AACP,WAAA,IAAA;AACD;;AAED,MAAMC,KAAAA,GAAQ,KAAA,CAAA,MAAA,CACZ,UAAA,aAAA,EAAA,OAAA,EAAA;AAAA,WAA4BC,aAAAA,GAAgBC,OAAAA,CAA5C,MAAA;AADY,GAAA,EAAd,CAAc,CAAd;AAKA,MAAMC,GAAAA,GAAMH,KAAAA,GAAZ,EAAA,CAZG,CAcH;;AACA,MAAMI,EAAAA,GAAN,EAAA;AACA,MAAMC,UAAAA,GAAa,KAAA,CAAA,MAAA,CAAa,UAAA,WAAA,EAAA,OAAA,EAA0B;AAAA,QAChDC,EADgD,GACjCJ,OADiC,CAAA,EAAA;AAAA,QAC5CK,MAD4C,GACjCL,OADiC,CAAA,MAAA;AAExD,QAAIM,OAAAA,GAAUD,MAAAA,GAASV,CAAAA,GAAAA,SAAAA,IAAiBM,GAAAA,GAAxC,MAAuBN,CAAvB;AACA,QAAIW,OAAAA,GAAJ,CAAA,EAAiBA,OAAAA,GAAAA,CAAAA;AACjBJ,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,GAAS,CAACA,EAAAA,CAAAA,EAAAA,CAAAA,IAAD,CAAA,IAATA,OAAAA;AACA,WAAOK,WAAAA,GAAP,OAAA;AALiB,GAAA,EAAnB,CAAmB,CAAnB;AAQA,MAAIC,cAAAA,GAAJ,CAAA;AACA,MAAMC,kBAAAA,GAAN,EAAA;AACAC,EAAAA,MAAAA,CAAAA,IAAAA,CAAAA,EAAAA,EAAAA,OAAAA,CAAwB,UAAA,EAAA,EAAQ;AAC9BF,IAAAA,cAAAA,IAAkBN,EAAAA,CAAlBM,EAAkBN,CAAlBM;AACAC,IAAAA,kBAAAA,CAAAA,EAAAA,CAAAA,GAAAA,cAAAA;AAFFC,GAAAA;AAKA,MAAIP,UAAAA,IAAJ,CAAA,EAAqB,OA/BlB,IA+BkB,CA/BlB,CA+B+B;AAClC;;AACA,MAAMQ,MAAAA,GAASpB,cAAAA,KAAf,UAAA;AACA,MAAMqB,GAAAA,GAAMF,MAAAA,CAAAA,IAAAA,CAAZ,kBAAYA,CAAZ;;AACA,OAAK,IAAIG,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAID,GAAAA,CAApB,MAAA,EAAgCC,CAAhC,EAAA,EAAqC;AACnC,QAAMT,EAAAA,GAAKQ,GAAAA,CAAX,CAAWA,CAAX;AACA,QAAMN,OAAAA,GAAUG,kBAAAA,CAAhB,EAAgBA,CAAhB;;AACA,QAAIE,MAAAA,IAAJ,OAAA,EAAuB;AACrB,aAAA,EAAA;AACD;AACF;AA9CH,CAAA;;AAiDAG,MAAAA,CAAAA,OAAAA,GAAAA,oBAAAA","sourcesContent":["const randomWeightedChoice = (\n  table,\n  temperature = 50, // in [0,100], 50 is neutral\n  randomFunction = Math.random,\n  influence = 2 // seems fine, hard to tune\n) => {\n  const T = (temperature - 50) / 50;\n  const nb = table.length;\n  if (!nb) {\n    return null;\n  }\n\n  const total = table.reduce(\n    (previousTotal, element) => previousTotal + element.weight,\n    0\n  );\n\n  const avg = total / nb;\n\n  // Compute amplified urgencies (depending on temperature)\n  const ur = {};\n  const urgencySum = table.reduce((previousSum, element) => {\n    const { id, weight } = element;\n    let urgency = weight + T * influence * (avg - weight);\n    if (urgency < 0) urgency = 0;\n    ur[id] = (ur[id] || 0) + urgency;\n    return previousSum + urgency;\n  }, 0);\n\n  let currentUrgency = 0;\n  const cumulatedUrgencies = {};\n  Object.keys(ur).forEach((id) => {\n    currentUrgency += ur[id];\n    cumulatedUrgencies[id] = currentUrgency;\n  });\n\n  if (urgencySum <= 0) return null; // No weight given\n  // Choose\n  const choice = randomFunction() * urgencySum;\n  const ids = Object.keys(cumulatedUrgencies);\n  for (let i = 0; i < ids.length; i++) {\n    const id = ids[i];\n    const urgency = cumulatedUrgencies[id];\n    if (choice <= urgency) {\n      return id;\n    }\n  }\n};\n\nmodule.exports = randomWeightedChoice;\n"]},"metadata":{},"sourceType":"script"}
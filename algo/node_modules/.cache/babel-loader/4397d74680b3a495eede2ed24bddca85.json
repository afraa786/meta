{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Afraa\\\\Documents\\\\3D-Pathfinding-Visualizer\\\\src\\\\components\\\\World.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Grid from './Grid';\nimport Mars from './Mars';\nimport { Canvas } from 'react-three-fiber';\nimport Floor from './Floor';\nimport Controls from './Controls';\nimport { Button, Select, MenuItem } from '@material-ui/core';\nimport BorderClearIcon from '@material-ui/icons/BorderClear';\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport { spacing } from '@material-ui/system';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tutorial from './Tutorial';\nimport Settings from './Settings';\nimport { AwesomeButton, AwesomeButtonProgress } from 'react-awesome-button';\nimport \"react-awesome-button/dist/styles.css\"; //<OrbitControls enabled = {!worldSetup} />\n\nfunction World(props) {\n  _s();\n\n  let width = window.innerWidth;\n  let height = window.innerHeigh;\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState({}); // keeps track of the algorithm we choose\n\n  const [runState, setRunState] = useState(false); //when runState is true the visualizer algorithm is running\n\n  const [resetCamera, setResetCamera] = useState(false); //when resetCamera is true we reset the camera position\n\n  const [clearWalls, setClearWalls] = useState(false);\n  const [agentTrained, setAgentTrained] = useState(false);\n  const [clearPath, setClearPath] = useState(false);\n  const [trainAgent, setTrainAgent] = useState(false);\n  const [agentKnowledge, setAgentKnowledge] = useState(\"\");\n  const cameraPosition = useRef([0, 375, 0]);\n  const [selectedMazeAlgorithm, setSelectedMazeAlgorithm] = useState(\"\");\n  const [algorithmSpeed, setAlgorithmSpeed] = useState(\"15\");\n  const [selected_algo_is_undefined, setAlgo] = useState(true);\n  const [policyCuriosity, setPolicyCuriosity] = useState(0.8);\n  const [applyingSettings, setApplyingSettings] = useState(false);\n  const [settingsConfig, setConfig] = useState({\n    epochs: 1000,\n    startRow: 5,\n    startCol: 5,\n    finishRow: 25,\n    finishCol: 25,\n    learningRate: 0.2,\n    agentCuriosity: 0.8\n  });\n  const [visualizeOptimalPolicy, setVisualizeOptimalPolicy] = useState(false);\n  const useStyles = makeStyles(theme => ({\n    root: {\n      '& > *': {\n        //margin: theme.spacing(1),\n        background: '#1E88E5',\n        border: 0,\n        borderRadius: 3,\n        color: 'white',\n        width: '150px',\n        height: '44px',\n        'margin-left': '10px',\n        'font-family': 'inherit',\n        'font-weight': 600,\n        'font-style': 'normal'\n      }\n    }\n  }));\n  const classes = useStyles(); //calling on this funciton in the child component (Grid) to update runstate in this parent\n\n  function updateRunState(newState) {\n    setRunState(newState);\n  }\n\n  function stopClearPath() {\n    setClearPath(false);\n  }\n\n  function stopClearWalls() {\n    setClearWalls(false);\n  }\n\n  function startTraining() {\n    setTrainAgent(true);\n  }\n\n  function stopTraining() {\n    setTrainAgent(false);\n  }\n\n  function resetAgentKnowledge() {\n    setAgentKnowledge(\"clearMemory\");\n  }\n\n  function agentResetDone() {\n    setAgentKnowledge(\"\");\n  }\n\n  function configureSettings(userEpochs, userStartRow, userStartCol, userFinishRow, userFinishCol, userLearningRate, userAgentCuriosity) {\n    setConfig({\n      epochs: Number(userEpochs),\n      startRow: Number(userStartRow),\n      startCol: Number(userStartCol),\n      finishRow: Number(userFinishRow),\n      finishCol: Number(userFinishCol),\n      learningRate: Number(userLearningRate),\n      agentCuriosity: Number(userAgentCuriosity)\n    });\n    setApplyingSettings(true);\n  }\n\n  function finishApplyingSettings() {\n    setApplyingSettings(false);\n  }\n\n  function visualizePolicy() {\n    setVisualizeOptimalPolicy(true);\n  }\n\n  function updateAgentCuriosity(agentQ) {\n    setPolicyCuriosity(agentQ);\n  }\n\n  function finishedOptimalPolicy() {\n    setVisualizeOptimalPolicy(false);\n  }\n\n  function handleOnChange(event) {\n    if (event.target.value !== undefined) {\n      setAlgo(false);\n    }\n\n    if (event.target.value === undefined) {\n      setAlgo(true);\n    }\n\n    if (event.target.value === \"Dijkstra\") {\n      setSelectedAlgorithm({\n        algorithm: \"Dijkstra\",\n        type: \"weighted\",\n        heuristic: \"\"\n      });\n    } else if (event.target.value === \"qLearning\") {\n      setSelectedAlgorithm({\n        algorithm: \"Q-Learning\",\n        type: \"machine-learning\",\n        heuristic: \"\"\n      });\n    } else if (event.target.value === \"aStar\") {\n      setSelectedAlgorithm({\n        algorithm: \"aStar\",\n        type: \"weighted\",\n        heuristic: \"poweredManhattanDistance\"\n      });\n    } else if (event.target.value === \"BFS\") {\n      setSelectedAlgorithm({\n        algorithm: \"BFS\",\n        type: \"unweighted\",\n        heuristic: \"\"\n      });\n    } else if (event.target.value === \"DFS\") {\n      setSelectedAlgorithm({\n        algorithm: \"DFS\",\n        type: \"unweighted\",\n        heuristic: \"\"\n      });\n    }\n  }\n\n  function updateResetStatus() {\n    setResetCamera(false);\n  }\n\n  function handleMazeChange(event) {\n    setSelectedMazeAlgorithm(event.target.value);\n  }\n\n  function stopMazeSelection() {\n    setSelectedMazeAlgorithm(\"\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      align: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          name: \"algorithms\",\n          id: \"algorithms\",\n          displayEmpty: true,\n          onChange: e => handleOnChange(e),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            children: \"Select Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"qLearning\",\n            children: \"Q-Learning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Dijkstra\",\n            children: \"Dijkstra's Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"aStar\",\n            children: \"A* Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"BFS\",\n            children: \"Breadth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"DFS\",\n            children: \"Depth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          name: \"mazes\",\n          id: \"mazes\",\n          displayEmpty: true,\n          onChange: e => handleMazeChange(e),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            children: \"Select Maze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"randomMaze\",\n            children: \"Random Maze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"recursiveDivision\",\n            children: \"Recursive Division\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header_items\",\n        children: /*#__PURE__*/_jsxDEV(AwesomeButtonProgress, {\n          type: \"secondary\",\n          size: \"medium\",\n          disabled: runState || selected_algo_is_undefined,\n          loadingLabel: \"Visualizing...\",\n          resultLabel: \"Success\",\n          ripple: true,\n          action: (element, next) => {\n            setTimeout(() => {\n              next(true, '');\n              setRunState(true);\n            }, 1000);\n          },\n          children: \"Visualize\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header_items\",\n        children: /*#__PURE__*/_jsxDEV(AwesomeButtonProgress, {\n          type: \"secondary\",\n          size: \"medium\",\n          disabled: runState,\n          loadingLabel: \"Clearing Path...\",\n          resultLabel: \"Path Cleared :-)\",\n          ripple: true,\n          action: (element, next) => {\n            setTimeout(() => {\n              next(true, '');\n              setClearPath(true);\n            }, 150);\n          },\n          children: \"Clear Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header_items\",\n        children: /*#__PURE__*/_jsxDEV(AwesomeButtonProgress, {\n          type: \"secondary\",\n          size: \"medium\",\n          disabled: runState,\n          loadingLabel: \"Clearing Walls...\",\n          resultLabel: \"Walls Cleared :-)\",\n          ripple: true,\n          action: (element, next) => {\n            setTimeout(() => {\n              next(true, '');\n              setClearWalls(true);\n            }, 550);\n          },\n          children: \"Clear Walls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header_items\",\n        children: /*#__PURE__*/_jsxDEV(AwesomeButton, {\n          type: \"secondary\",\n          size: \"medium\",\n          ripple: true,\n          action: (element, next) => {\n            setResetCamera(!resetCamera);\n          },\n          children: \"Setup World\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          name: \"algorithmSpeed\",\n          id: \"algorithmSpeed\",\n          displayEmpty: true,\n          onChange: e => setAlgorithmSpeed(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            children: \"Select Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"15\",\n            children: \"Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"25\",\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"80\",\n            children: \"Slow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header_items\",\n        children: /*#__PURE__*/_jsxDEV(AwesomeButton, {\n          type: \"secondary\",\n          size: \"medium\",\n          ripple: true,\n          action: (element, next) => {\n            resetAgentKnowledge();\n          },\n          children: \"Reset Agent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Tutorial, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Settings, {\n      startTraining: startTraining,\n      configureSettings: configureSettings,\n      updateAgentCuriosity: updateAgentCuriosity,\n      visualizePolicy: visualizePolicy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      colorManagement: true,\n      camera: {\n        position: cameraPosition.current,\n        fov: 53,\n        aspect: width / height,\n        near: 1,\n        far: 5000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 1,\n        color: 0xBBC2D0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hemisphereLight\", {\n        color: \"hsl(0.6, 1, 0.6)\",\n        groundColor: 0x87775d,\n        intensity: 0.1,\n        position: [0, 5, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        color: \"hsl(0.1, 1, 0.95)\",\n        groundColor: 0x87775d,\n        intensity: 0.5,\n        position: [-70, 122.5, 70],\n        castShadow: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        gridDimensions: 30,\n        updateRunState: updateRunState,\n        stopClearPath: stopClearPath,\n        stopClearWalls: stopClearWalls,\n        stopMazeSelection: stopMazeSelection,\n        stopTraining: stopTraining,\n        agentResetDone: agentResetDone,\n        finishApplyingSettings: finishApplyingSettings,\n        visualizeOptimalPolicy: visualizeOptimalPolicy,\n        policyCuriosity: policyCuriosity,\n        finishedOptimalPolicy: finishedOptimalPolicy,\n        resetStatus: resetCamera,\n        agentKnowledge: agentKnowledge,\n        selectedAlgorithm: selectedAlgorithm,\n        selectedMazeAlgorithm: selectedMazeAlgorithm,\n        algorithmSpeed: algorithmSpeed //epochs = {settingsConfig.epochs}\n        //learningRate = {settingsConfig.learningRate}\n        //agentCuriosity = {settingsConfig.agentCuriosity}\n        ,\n        applyingSettings: applyingSettings,\n        settingsConfig: settingsConfig,\n        worldProperties: {\n          rows: 30,\n          cols: 30,\n          runState: runState,\n          clearPath: clearPath,\n          clearWalls: clearWalls,\n          trainAgent: trainAgent,\n          start: {\n            row: settingsConfig.startRow,\n            col: settingsConfig.startCol\n          },\n          finish: {\n            row: settingsConfig.finishRow,\n            col: settingsConfig.finishCol\n          },\n          colors: {\n            start: {\n              r: 0,\n              g: 1,\n              b: 0\n            },\n            finish: {\n              r: 1,\n              g: 0,\n              b: 0\n            },\n            wall: {\n              r: 0.109,\n              g: 0.109,\n              b: 0.45\n            },\n            visited: {\n              r: 0.329,\n              g: 0.27,\n              b: 0.968\n            },\n            path: {\n              r: 1,\n              g: 1,\n              b: 0\n            },\n            default: {\n              r: 1,\n              g: 1,\n              b: 1\n            }\n          },\n          nodeDimensions: {\n            height: 10,\n            width: 10\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Floor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        resetStatus: resetCamera,\n        updateResetStatus: updateResetStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(World, \"QOC99JjzchDHcld/FJChr0VIBHE=\", false, function () {\n  return [useStyles];\n});\n\n_c = World;\nexport default World;\n\nvar _c;\n\n$RefreshReg$(_c, \"World\");","map":{"version":3,"sources":["C:/Users/Afraa/Documents/3D-Pathfinding-Visualizer/src/components/World.js"],"names":["React","useState","useRef","Grid","Mars","Canvas","Floor","Controls","Button","Select","MenuItem","BorderClearIcon","TerrainIcon","UndoIcon","spacing","makeStyles","Tutorial","Settings","AwesomeButton","AwesomeButtonProgress","World","props","width","window","innerWidth","height","innerHeigh","selectedAlgorithm","setSelectedAlgorithm","runState","setRunState","resetCamera","setResetCamera","clearWalls","setClearWalls","agentTrained","setAgentTrained","clearPath","setClearPath","trainAgent","setTrainAgent","agentKnowledge","setAgentKnowledge","cameraPosition","selectedMazeAlgorithm","setSelectedMazeAlgorithm","algorithmSpeed","setAlgorithmSpeed","selected_algo_is_undefined","setAlgo","policyCuriosity","setPolicyCuriosity","applyingSettings","setApplyingSettings","settingsConfig","setConfig","epochs","startRow","startCol","finishRow","finishCol","learningRate","agentCuriosity","visualizeOptimalPolicy","setVisualizeOptimalPolicy","useStyles","theme","root","background","border","borderRadius","color","classes","updateRunState","newState","stopClearPath","stopClearWalls","startTraining","stopTraining","resetAgentKnowledge","agentResetDone","configureSettings","userEpochs","userStartRow","userStartCol","userFinishRow","userFinishCol","userLearningRate","userAgentCuriosity","Number","finishApplyingSettings","visualizePolicy","updateAgentCuriosity","agentQ","finishedOptimalPolicy","handleOnChange","event","target","value","undefined","algorithm","type","heuristic","updateResetStatus","handleMazeChange","stopMazeSelection","e","element","next","setTimeout","position","current","fov","aspect","near","far","rows","cols","start","row","col","finish","colors","r","g","b","wall","visited","path","default","nodeDimensions"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport Grid from './Grid';\r\nimport Mars from './Mars';\r\nimport { Canvas } from 'react-three-fiber';\r\nimport Floor from './Floor';\r\nimport Controls from './Controls'; \r\nimport { Button, Select, MenuItem } from '@material-ui/core'\r\nimport BorderClearIcon from '@material-ui/icons/BorderClear';\r\nimport TerrainIcon from '@material-ui/icons/Terrain';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport { spacing } from '@material-ui/system';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tutorial from './Tutorial';\r\nimport Settings from './Settings';\r\nimport { AwesomeButton, AwesomeButtonProgress } from 'react-awesome-button';\r\nimport \"react-awesome-button/dist/styles.css\";\r\n\r\n\r\n//<OrbitControls enabled = {!worldSetup} />\r\nfunction World(props) {\r\n   let width = window.innerWidth;\r\n   let height = window.innerHeigh;\r\n\r\n\r\n\r\n   const [selectedAlgorithm,  setSelectedAlgorithm] = useState({});     // keeps track of the algorithm we choose\r\n   const [runState, setRunState] = useState(false);                     //when runState is true the visualizer algorithm is running\r\n   const [resetCamera, setResetCamera] = useState(false);               //when resetCamera is true we reset the camera position\r\n   const [clearWalls, setClearWalls] = useState(false);\r\n   const [agentTrained, setAgentTrained] = useState(false);\r\n   const [clearPath, setClearPath] = useState(false);\r\n   const [trainAgent, setTrainAgent] = useState(false);\r\n   const [agentKnowledge, setAgentKnowledge] = useState(\"\");\r\n   const cameraPosition = useRef([0,375,0]);\r\n   const [selectedMazeAlgorithm, setSelectedMazeAlgorithm] = useState(\"\");\r\n   const [algorithmSpeed, setAlgorithmSpeed] = useState(\"15\");\r\n   const [selected_algo_is_undefined, setAlgo] = useState(true);\r\n\r\n   const [policyCuriosity , setPolicyCuriosity] = useState(0.8);\r\n   \r\n   \r\n   const [applyingSettings, setApplyingSettings] = useState(false);\r\n   const [settingsConfig, setConfig] = useState({\r\n       epochs: 1000,\r\n       startRow: 5,\r\n       startCol: 5,\r\n       finishRow: 25,\r\n       finishCol: 25,\r\n       learningRate: 0.2,\r\n       agentCuriosity: 0.8,   \r\n   })\r\n\r\n   const [visualizeOptimalPolicy, setVisualizeOptimalPolicy] = useState(false)\r\n   \r\n   const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        //margin: theme.spacing(1),\r\n        background: '#1E88E5',\r\n        border: 0,\r\n        borderRadius: 3,\r\n        color: 'white',\r\n        width: '150px',\r\n        height: '44px',\r\n        'margin-left': '10px',\r\n        'font-family': 'inherit',\r\n        'font-weight': 600,\r\n        'font-style': 'normal',\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n   //calling on this funciton in the child component (Grid) to update runstate in this parent\r\n   function updateRunState(newState){\r\n       setRunState(newState);\r\n   }\r\n   function stopClearPath(){\r\n       setClearPath(false);\r\n   }\r\n   function stopClearWalls(){\r\n       setClearWalls(false);\r\n   }\r\n   function startTraining(){\r\n       setTrainAgent(true);\r\n   }\r\n   function stopTraining(){\r\n       setTrainAgent(false);\r\n   }\r\n   function resetAgentKnowledge(){\r\n       setAgentKnowledge(\"clearMemory\")\r\n   }\r\n   function agentResetDone(){\r\n       setAgentKnowledge(\"\");\r\n   }\r\n   function configureSettings(userEpochs,userStartRow,userStartCol,userFinishRow,userFinishCol,userLearningRate,userAgentCuriosity){\r\n       setConfig({\r\n           epochs: Number(userEpochs),\r\n           startRow: Number(userStartRow),\r\n           startCol: Number(userStartCol),\r\n           finishRow: Number(userFinishRow),\r\n           finishCol: Number(userFinishCol),\r\n           learningRate: Number(userLearningRate),\r\n           agentCuriosity: Number(userAgentCuriosity),\r\n\r\n       });\r\n       setApplyingSettings(true)\r\n       \r\n   }\r\n   function finishApplyingSettings(){\r\n       setApplyingSettings(false);\r\n   }\r\n   function visualizePolicy(){\r\n    setVisualizeOptimalPolicy(true);\r\n}\r\nfunction updateAgentCuriosity(agentQ){\r\n    setPolicyCuriosity(agentQ)\r\n}\r\nfunction finishedOptimalPolicy(){\r\n    setVisualizeOptimalPolicy(false);\r\n}\r\n   function handleOnChange(event){\r\n       if(event.target.value !== undefined){\r\n           setAlgo(false);\r\n        }\r\n       if(event.target.value === undefined){\r\n        setAlgo(true);\r\n        }\r\n       if(event.target.value === \"Dijkstra\"){\r\n           setSelectedAlgorithm({\r\n               algorithm: \"Dijkstra\",\r\n               type: \"weighted\", \r\n               heuristic: \"\",\r\n           });\r\n       }\r\n       else if (event.target.value === \"qLearning\"){\r\n           setSelectedAlgorithm({\r\n               algorithm: \"Q-Learning\",\r\n               type: \"machine-learning\",\r\n               heuristic: \"\",\r\n           });\r\n       }\r\n       else if(event.target.value === \"aStar\"){\r\n           setSelectedAlgorithm({\r\n               algorithm: \"aStar\",\r\n               type: \"weighted\",\r\n               heuristic: \"poweredManhattanDistance\",\r\n           });\r\n       }\r\n       else if(event.target.value === \"BFS\"){\r\n           setSelectedAlgorithm({\r\n               algorithm: \"BFS\",\r\n               type: \"unweighted\",\r\n               heuristic: \"\",\r\n           });\r\n       }\r\n       else if(event.target.value === \"DFS\"){\r\n           setSelectedAlgorithm({\r\n               algorithm: \"DFS\",\r\n               type: \"unweighted\",\r\n               heuristic: \"\"\r\n           })\r\n       }\r\n   }\r\n   function updateResetStatus(){\r\n       setResetCamera(false);\r\n   }\r\n   function handleMazeChange(event){\r\n       setSelectedMazeAlgorithm(event.target.value);\r\n   }\r\n   function stopMazeSelection(){\r\n       setSelectedMazeAlgorithm(\"\");\r\n   }\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className = \"header\" align = \"center\" >\r\n            <div className={classes.root}>\r\n                <Select name = \"algorithms\" id = \"algorithms\" displayEmpty onChange={e => handleOnChange(e)}>\r\n                    <MenuItem>Select Algorithm</MenuItem>\r\n                    <MenuItem value = \"qLearning\">Q-Learning</MenuItem>\r\n                    {/* <MenuItem value = \"valueIteration\">Value Iteration</MenuItem>\r\n                    <MenuItem value = \"floyd\">Floyd's Algorithm</MenuItem> */}\r\n                    <MenuItem value = \"Dijkstra\">Dijkstra's Algorithm</MenuItem>\r\n                    <MenuItem value = \"aStar\">A* Search</MenuItem>\r\n                    <MenuItem value = \"BFS\">Breadth First Search</MenuItem>\r\n                    <MenuItem value = \"DFS\">Depth First Search</MenuItem>\r\n                    \r\n                    \r\n\r\n                </Select>\r\n            </div>\r\n            <div className={classes.root}>\r\n                <Select name = \"mazes\" id = \"mazes\" displayEmpty onChange = {e => handleMazeChange(e)}>\r\n                    <MenuItem>Select Maze</MenuItem>\r\n                    <MenuItem value = \"randomMaze\">Random Maze</MenuItem>\r\n                    <MenuItem value = \"recursiveDivision\">Recursive Division</MenuItem>\r\n                </Select>\r\n            </div>\r\n            <div className = \"header_items\">\r\n                <AwesomeButtonProgress \r\n                    type = \"secondary\"\r\n                    size = \"medium\"\r\n                    disabled = {runState || selected_algo_is_undefined}\r\n                    loadingLabel = \"Visualizing...\"\r\n                    resultLabel = \"Success\"\r\n                    ripple = {true}\r\n                    action={(element, next) => {\r\n                        setTimeout(() => {\r\n                            next(true, '');\r\n                            setRunState(true)\r\n                        }, 1000);\r\n                    }}\r\n                    >\r\n                    Visualize\r\n                </AwesomeButtonProgress>\r\n            </div>\r\n            <div className = \"header_items\">\r\n                <AwesomeButtonProgress \r\n                    type = \"secondary\"\r\n                    size = \"medium\"\r\n                    disabled = {runState}\r\n                    loadingLabel = \"Clearing Path...\"\r\n                    resultLabel = \"Path Cleared :-)\"\r\n                    ripple = {true}\r\n                    action={(element, next) => {\r\n                        setTimeout(() => {\r\n                            next(true, '');\r\n                            setClearPath(true)\r\n                        }, 150);\r\n                    }}\r\n                    >\r\n                    Clear Path\r\n                </AwesomeButtonProgress>\r\n            </div>\r\n            <div className = \"header_items\">\r\n                <AwesomeButtonProgress \r\n                    type = \"secondary\"\r\n                    size = \"medium\"\r\n                    disabled = {runState}\r\n                    loadingLabel = \"Clearing Walls...\"\r\n                    resultLabel = \"Walls Cleared :-)\"\r\n                    ripple = {true}\r\n                    action={(element, next) => {\r\n                        setTimeout(() => {\r\n                            next(true, '');\r\n                            setClearWalls(true)\r\n                        }, 550);\r\n                    }}\r\n                    >\r\n                    Clear Walls\r\n                </AwesomeButtonProgress>\r\n            </div>\r\n        <div className = \"header_items\">\r\n        <AwesomeButton \r\n            type = \"secondary\"\r\n            size = \"medium\"\r\n            ripple = {true}\r\n            action={(element, next) => {\r\n                setResetCamera(!resetCamera)\r\n            }}\r\n            >\r\n            Setup World\r\n        </AwesomeButton>\r\n        </div>\r\n        <div className={classes.root}>\r\n        <Select name = \"algorithmSpeed\" id = \"algorithmSpeed\" displayEmpty onChange = { e=> setAlgorithmSpeed(e.target.value)}>\r\n            <MenuItem>Select Speed</MenuItem>\r\n            <MenuItem value = \"15\">Fast</MenuItem>\r\n            <MenuItem value = \"25\">Medium</MenuItem>\r\n            <MenuItem value = \"80\">Slow</MenuItem>\r\n        </Select>\r\n        </div>\r\n        <div className = \"header_items\">\r\n        <AwesomeButton \r\n            type = \"secondary\"\r\n            size = \"medium\"\r\n            ripple = {true}\r\n            action={(element, next) => {\r\n               resetAgentKnowledge(); \r\n            }}\r\n            >\r\n            Reset Agent\r\n        </AwesomeButton>\r\n        </div>\r\n        </div>\r\n        <Tutorial />\r\n        <Settings  \r\n            startTraining = {startTraining}\r\n            configureSettings = {configureSettings}\r\n            updateAgentCuriosity = {updateAgentCuriosity}\r\n            visualizePolicy = {visualizePolicy}\r\n        />\r\n        <Canvas colorManagement \r\n        camera={\r\n            {\r\n                position: cameraPosition.current,\r\n                fov: 53,\r\n                aspect: width / height,\r\n                near: 1, \r\n                far: 5000\r\n                }\r\n            }\r\n        >\r\n        <ambientLight \r\n            intensity = {1} \r\n            color = {0xBBC2D0}/>\r\n        {/*<fog attach = \"fog\" args = {[0xFFFFFF , 0, 750]}/>*/}\r\n        <hemisphereLight \r\n            color = {\"hsl(0.6, 1, 0.6)\"} \r\n            groundColor = {0x87775d} \r\n            intensity = {0.1} \r\n            position = {[0,5,0]} \r\n        />\r\n        <directionalLight \r\n            color = {\"hsl(0.1, 1, 0.95)\"} \r\n            groundColor = {0x87775d} \r\n            intensity = {0.5} \r\n            position = {[-70,122.5,70]} \r\n            castShadow = {true}\r\n        />   \r\n        <Grid \r\n            gridDimensions = {30}\r\n            updateRunState = {updateRunState}\r\n            stopClearPath = {stopClearPath}\r\n            stopClearWalls = {stopClearWalls}\r\n            stopMazeSelection = {stopMazeSelection}\r\n            stopTraining = {stopTraining}\r\n            agentResetDone = {agentResetDone}\r\n            finishApplyingSettings = {finishApplyingSettings}\r\n            visualizeOptimalPolicy = {visualizeOptimalPolicy}\r\n            policyCuriosity = {policyCuriosity}\r\n            finishedOptimalPolicy = {finishedOptimalPolicy}\r\n            resetStatus = {resetCamera}\r\n            agentKnowledge = {agentKnowledge}\r\n            selectedAlgorithm = {selectedAlgorithm}\r\n            selectedMazeAlgorithm = {selectedMazeAlgorithm}\r\n            algorithmSpeed = {algorithmSpeed} \r\n            //epochs = {settingsConfig.epochs}\r\n            //learningRate = {settingsConfig.learningRate}\r\n            //agentCuriosity = {settingsConfig.agentCuriosity}\r\n            applyingSettings = {applyingSettings}\r\n            settingsConfig = {settingsConfig}\r\n            worldProperties = {\r\n            {\r\n                rows: 30,\r\n                cols: 30,\r\n                runState: runState,\r\n                clearPath: clearPath,\r\n                clearWalls: clearWalls,\r\n                trainAgent: trainAgent,\r\n                start: {\r\n                    row: settingsConfig.startRow,\r\n                    col: settingsConfig.startCol,\r\n                },\r\n                finish: {\r\n                    row: settingsConfig.finishRow,\r\n                    col: settingsConfig.finishCol,\r\n                },\r\n                colors: {\r\n                    start: {r: 0, g: 1, b: 0 },\r\n                    finish: {r: 1, g: 0, b: 0},\r\n                    wall: {r: 0.109, g: 0.109, b: 0.45},\r\n                    visited: {r: 0.329, g: 0.27, b: 0.968},\r\n                    path: {r: 1, g: 1, b: 0},\r\n                    default: {r: 1, g: 1, b: 1},\r\n                },\r\n                nodeDimensions:{\r\n                    height: 10,\r\n                    width: 10,\r\n                },\r\n            }\r\n        }/>\r\n        <Floor/>\r\n        <Controls \r\n            resetStatus = {resetCamera}\r\n            updateResetStatus = {updateResetStatus}\r\n        />\r\n       \r\n      </Canvas>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default World\r\n\r\n"]},"metadata":{},"sourceType":"module"}
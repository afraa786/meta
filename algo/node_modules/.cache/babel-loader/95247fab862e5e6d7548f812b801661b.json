{"ast":null,"code":"export function nQueensInteractive(grid, nodesToAnimate) {\n  const size = grid.length;\n  const queens = [];\n  const attackPaths = []; // Stores all attack paths\n  // Reset grid\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (grid[row][col].status !== \"wall\") {\n        grid[row][col].status = \"unvisited\";\n      }\n    }\n  }\n\n  function showAttackPaths(row, col) {\n    const paths = []; // Highlight row\n\n    for (let c = 0; c < size; c++) {\n      if (c !== col) paths.push({\n        row,\n        col: c,\n        type: \"row\"\n      });\n    } // Highlight column\n\n\n    for (let r = 0; r < size; r++) {\n      if (r !== row) paths.push({\n        row: r,\n        col,\n        type: \"col\"\n      });\n    } // Highlight diagonals\n\n\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        if (Math.abs(r - row) === Math.abs(c - col) && !(r === row && c === col)) {\n          paths.push({\n            row: r,\n            col: c,\n            type: \"diagonal\"\n          });\n        }\n      }\n    }\n\n    attackPaths.push(...paths);\n    return paths;\n  }\n\n  return {\n    placeQueen(row, col) {\n      if (grid[row][col].status === \"wall\") return false; // Check if position is safe\n\n      for (const q of queens) {\n        if (q.row === row || q.col === col || Math.abs(q.row - row) === Math.abs(q.col - col)) {\n          return false;\n        }\n      }\n\n      queens.push({\n        row,\n        col\n      });\n      grid[row][col].status = \"queen\"; // Show attack paths\n\n      const paths = showAttackPaths(row, col);\n      nodesToAnimate.push({\n        node: { ...grid[row][col]\n        },\n        type: \"queen\"\n      }, ...paths.map(p => ({\n        node: { ...grid[p.row][p.col]\n        },\n        type: \"attack\",\n        attackType: p.type\n      })));\n      return true;\n    },\n\n    removeQueen(row, col) {\n      queens = queens.filter(q => !(q.row === row && q.col === col));\n      grid[row][col].status = \"unvisited\"; // Recalculate all attack paths\n\n      attackPaths.length = 0;\n      queens.forEach(q => showAttackPaths(q.row, q.col));\n    },\n\n    getAttackPaths() {\n      return [...attackPaths];\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/Afraa/Documents/3D-Pathfinding-Visualizer/src/components/algorithms/nQueens.js"],"names":["nQueensInteractive","grid","nodesToAnimate","size","length","queens","attackPaths","row","col","status","showAttackPaths","paths","c","push","type","r","Math","abs","placeQueen","q","node","map","p","attackType","removeQueen","filter","forEach","getAttackPaths"],"mappings":"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","sourcesContent":["export function nQueensInteractive(grid, nodesToAnimate) {\r\n  const size = grid.length;\r\n  const queens = [];\r\n  const attackPaths = []; // Stores all attack paths\r\n\r\n  // Reset grid\r\n  for (let row = 0; row < size; row++) {\r\n    for (let col = 0; col < size; col++) {\r\n      if (grid[row][col].status !== \"wall\") {\r\n        grid[row][col].status = \"unvisited\";\r\n      }\r\n    }\r\n  }\r\n\r\n  function showAttackPaths(row, col) {\r\n    const paths = [];\r\n    // Highlight row\r\n    for (let c = 0; c < size; c++) {\r\n      if (c !== col) paths.push({row, col: c, type: \"row\"});\r\n    }\r\n    // Highlight column\r\n    for (let r = 0; r < size; r++) {\r\n      if (r !== row) paths.push({row: r, col, type: \"col\"});\r\n    }\r\n    // Highlight diagonals\r\n    for (let r = 0; r < size; r++) {\r\n      for (let c = 0; c < size; c++) {\r\n        if (Math.abs(r - row) === Math.abs(c - col) && !(r === row && c === col)) {\r\n          paths.push({row: r, col: c, type: \"diagonal\"});\r\n        }\r\n      }\r\n    }\r\n    attackPaths.push(...paths);\r\n    return paths;\r\n  }\r\n\r\n  return {\r\n    placeQueen(row, col) {\r\n      if (grid[row][col].status === \"wall\") return false;\r\n      \r\n      // Check if position is safe\r\n      for (const q of queens) {\r\n        if (q.row === row || q.col === col || \r\n            Math.abs(q.row - row) === Math.abs(q.col - col)) {\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      queens.push({row, col});\r\n      grid[row][col].status = \"queen\";\r\n      \r\n      // Show attack paths\r\n      const paths = showAttackPaths(row, col);\r\n      nodesToAnimate.push(\r\n        {node: {...grid[row][col]}, type: \"queen\"},\r\n        ...paths.map(p => ({\r\n          node: {...grid[p.row][p.col]}, \r\n          type: \"attack\",\r\n          attackType: p.type\r\n        }))\r\n      );\r\n      \r\n      return true;\r\n    },\r\n    removeQueen(row, col) {\r\n      queens = queens.filter(q => !(q.row === row && q.col === col));\r\n      grid[row][col].status = \"unvisited\";\r\n      // Recalculate all attack paths\r\n      attackPaths.length = 0;\r\n      queens.forEach(q => showAttackPaths(q.row, q.col));\r\n    },\r\n    getAttackPaths() {\r\n      return [...attackPaths];\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}
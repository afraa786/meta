{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Afraa\\\\Documents\\\\3D-Pathfinding-Visualizer\\\\src\\\\components\\\\Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport img from './floor_texture.jpg';\nimport { tweenToColor, getNodesInShortestPathOrder } from './algorithms/helpers';\nimport TWEEN from '@tweenjs/tween.js';\nimport { weightedSearchAlgorithm } from \"./algorithms/weightedSearchAlgorithm.js\";\nimport { unweightedSearchAlgorithm } from \"./algorithms/unweightedSearchAlgorithm.js\";\nimport { randomMaze, recursiveDivisionMaze } from './algorithms/mazeAlgorithms';\nimport { useThree } from 'react-three-fiber';\nimport * as tf from '@tensorflow/tfjs';\nimport { math } from '@tensorflow/tfjs';\n\nfunction Grid(props) {\n  _s();\n\n  let groundMaterial;\n  let groundMesh;\n  let mouseDownX = 0;\n  let mouseDownY = 0;\n  let previousHoverNodeId;\n  let currentHoverNodeId;\n  let mouseIsUp = true;\n  const [groundGeometry, setGroundGeometry] = useState(new THREE.PlaneGeometry(300, 300, 30, 30));\n  const selectedAlgorithm = props.selectedAlgorithm;\n  const selectedMazeAlgorithm = props.selectedMazeAlgorithm;\n  const runState = props.worldProperties.runState;\n  const trainTheAgent = props.worldProperties.trainAgent;\n  const clearTheWalls = props.worldProperties.clearWalls; //rename this variable\n\n  const clearThePath = props.worldProperties.clearPath; // rename this variable too\n\n  const algorithmSpeed = props.algorithmSpeed;\n  const agentKnowledge = props.agentKnowledge;\n  const applyingSettings = props.applyingSettings;\n  const visualizeThePolicy = props.visualizeOptimalPolicy;\n  const {\n    camera\n  } = useThree();\n  useEffect(() => {\n    if (props.applyingSettings) {\n      resetTerrainConfig();\n    }\n\n    if (props.visualizeOptimalPolicy) {\n      calculateOptimalPolicy();\n      animateOptimalPolicy();\n      props.finishedOptimalPolicy();\n    }\n  }, [applyingSettings, visualizeThePolicy]);\n  useEffect(() => {\n    if (props.agentKnowledge === \"clearMemory\") {\n      terrain.records = [];\n      terrain.q_table = Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0)); //clearPath();\n\n      props.agentResetDone();\n    }\n\n    if (props.worldProperties.runState === true) {\n      if (props.selectedAlgorithm.type === \"machine-learning\") {\n        animateQlearning();\n      } else {\n        visualizeAlgorithm();\n      }\n    } else if (props.worldProperties.clearWalls === true) {\n      clearWalls();\n    } else if (props.worldProperties.clearPath === true) {\n      clearPath();\n    } else if (props.worldProperties.trainAgent === true) {\n      qLearning();\n    } else if (props.selectedMazeAlgorithm === \"randomMaze\") {\n      clearPath();\n      let nodesToAnimate = [];\n      randomMaze(terrain.grid, nodesToAnimate, \"wall\");\n      animateMaze(nodesToAnimate, \"wall\", 30);\n    } else if (props.selectedMazeAlgorithm === \"recursiveDivision\") {\n      clearPath();\n      let nodesToAnimate = [];\n      recursiveDivisionMaze(terrain.grid, 2, terrain.grid.length - 3, 2, terrain.grid.length - 3, \"horizontal\", false, nodesToAnimate, \"wall\");\n      animateMaze(nodesToAnimate, \"wall\", 30);\n    }\n  }, [runState, clearTheWalls, clearThePath, selectedMazeAlgorithm, trainTheAgent, agentKnowledge]);\n  const loader = useMemo(() => new THREE.TextureLoader().load(img, function (texture) {\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.x = 30;\n    texture.repeat.y = 30;\n    groundMaterial = new THREE.MeshLambertMaterial({\n      map: texture,\n      side: THREE.FrontSide,\n      vertexColors: THREE.FaceColors\n    });\n    groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);\n    groundMesh.receiveShadow = true;\n  }), [img]);\n  groundMaterial = new THREE.MeshLambertMaterial({\n    map: loader,\n    side: THREE.FrontSide,\n    vertexColors: THREE.FaceColors\n  });\n  const mesh = useRef(null);\n  const [terrain, setTerrain] = useState({\n    grid: initializeGrid(),\n    states: initStates(),\n    q_table: Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0)),\n    records: [],\n    optimalPolicy: [],\n    actions: {\n      \"left\": [0, -1],\n      \"down\": [1, 0],\n      \"right\": [0, 1],\n      \"up\": [-1, 0]\n    },\n    //visits: Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0)),\n    discountFactor: 0.8,\n    alpha: 0.1,\n    start: [props.settingsConfig.startRow, props.settingsConfig.startCol],\n    finish: [props.settingsConfig.finishRow, props.settingsConfig.finishCol]\n  });\n\n  function initializeGrid() {\n    let tempGrid = [];\n\n    for (let i = 0; i < 30; i++) {\n      let currentRow = [];\n\n      for (let j = 0; j < 30; j++) {\n        let node = createNode(i, j);\n        currentRow.push(node);\n      }\n\n      tempGrid.push(currentRow);\n    }\n    /*var vertices = new Float32Array(5400).fill(0);\r\n      groundGeometry.setAttribute('color', new THREE.Float32BufferAttribute( vertices,3) );\r\n    vertices[0] = 0\r\n    vertices[1]= 1\r\n    vertices[2]= 0\r\n      \r\n      console.log(groundGeometry.getAttribute('color'))\r\n    const tween1 = new TWEEN.Tween(groundGeometry.getAttribute('color'))\r\n                    .to(new THREE.Float32BufferAttribute( vertices,2) ,9000)\r\n      tween1.start()\r\n      tween1.onUpdate(function (object: THREE.BufferAttribute | THREE.InterleavedBufferAttribute, elapsed: number){\r\n      groundGeometry.setAttribute('color',object)\r\n    })\r\n    \r\n    \n    //console.log(vertices)\r\n    groundGeometry.setAttribute('color', new THREE.Float32BufferAttribute( vertices,2) );*/\n    //setState(tempStateGrid)\n\n\n    renderLoop();\n    return tempGrid;\n  }\n\n  function visualizeAlgorithm() {\n    console.log(\"Dijkstra Dijkstra Dijkstra\");\n    clearPath();\n    let nodesToAnimate = [];\n    let processedSuccessfully;\n    const startNode = terrain.grid[props.worldProperties.start.row][props.worldProperties.start.col];\n    const finishNode = terrain.grid[props.worldProperties.finish.row][props.worldProperties.finish.col];\n\n    if (selectedAlgorithm.type === \"weighted\") {\n      processedSuccessfully = weightedSearchAlgorithm(terrain.grid, startNode, finishNode, nodesToAnimate, selectedAlgorithm.algorithm, selectedAlgorithm.heuristic);\n      console.log(processedSuccessfully);\n    } else if (selectedAlgorithm.type === \"unweighted\") {\n      processedSuccessfully = unweightedSearchAlgorithm(terrain.grid, startNode, finishNode, nodesToAnimate, selectedAlgorithm.algorithm);\n    } else if (selectedAlgorithm.algorithm === \"nQueens\") {\n      // For N-Queens, we don't need start/finish nodes\n      processedSuccessfully = nQueensAlgorithm(terrain.grid, nodesToAnimate, props.worldProperties.gridSize || 8 // Default to 8 if gridSize not specified\n      ); // N-Queens doesn't have a path, just animate the solution\n\n      animateAlgorithm(nodesToAnimate, [], algorithmSpeed);\n      props.updateRunState(false);\n      return; // Early return since we don't need path animation\n    }\n\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateAlgorithm(nodesToAnimate, nodesInShortestPathOrder, algorithmSpeed);\n  }\n\n  function createNode(row, col) {\n    let status = \"default\";\n    let faces = {};\n    let faceIndex = row * 2 * props.worldProperties.cols + col * 2;\n    faces[1] = groundGeometry.faces[faceIndex];\n    faceIndex = faceIndex % 2 === 0 ? faceIndex + 1 : faceIndex - 1;\n    faces[2] = groundGeometry.faces[faceIndex];\n\n    if (row === props.worldProperties.start.row && col === props.worldProperties.start.col) {\n      status = \"start\";\n    } else if (row === props.worldProperties.finish.row && col === props.worldProperties.finish.col) {\n      status = \"finish\";\n    }\n\n    let node = {\n      id: row * props.worldProperties.cols + col,\n      row: row,\n      col: col,\n      faces: faces,\n      status: status,\n      distance: Infinity,\n      totalDistance: Infinity,\n      heuristicDistance: null,\n      direction: null,\n      weight: 0,\n      qValue: 0,\n      reward: 0,\n      visits: 0,\n      onceSpecial: false,\n      previousNode: null\n    };\n\n    if (status === \"start\") {\n      node.onceSpecial = true;\n      tweenToColor(node, groundGeometry, [props.worldProperties.colors.start]);\n    } else if (status === \"finish\") {\n      node.reward = 100;\n      node.onceSpecial = true;\n      tweenToColor(node, groundGeometry, [props.worldProperties.colors.finish]);\n    }\n\n    return node;\n  }\n\n  function initStates() {\n    let tempStateGrid = [];\n\n    for (let row = 0; row < props.worldProperties.rows; row++) {\n      for (let col = 0; col < props.worldProperties.cols; col++) {\n        tempStateGrid.push([row, col]);\n      }\n    } //console.log(tempStateGrid)\n\n\n    return tempStateGrid;\n  }\n  /*function initializeVisits(){\r\n    let visits = {}\r\n    let tempStates = initStates()\r\n    for(let row = 0; row < tempStates.length; row++){\r\n      for(let col = 0; col < tempStates[0].length; col++){\r\n        let state = tempStates[row][col]\r\n        visits[state] = 0;\r\n      }\r\n    }\r\n    return visits;\r\n  }*/\n\n\n  function renderLoop() {\n    window.requestAnimationFrame(renderLoop); //if(props.resetStatus){\n\n    hoverLoop(); // }\n\n    TWEEN.update();\n  }\n\n  function hoverLoop() {\n    if (mouseIsUp || currentHoverNodeId === previousHoverNodeId) {\n      return;\n    } else {\n      previousHoverNodeId = currentHoverNodeId;\n      let nodeRow = Math.floor(currentHoverNodeId / props.worldProperties.rows);\n      let nodeCol = currentHoverNodeId % props.worldProperties.cols;\n\n      if (nodeRow === props.worldProperties.start.row && nodeCol === props.worldProperties.start.col || nodeRow === props.worldProperties.finish.row && nodeCol === props.worldProperties.finish.col) {\n        return;\n      } else if (terrain.grid[nodeRow][nodeCol].status === \"wall\") {\n        terrain.grid[nodeRow][nodeCol].status = \"default\";\n        terrain.grid[nodeRow][nodeCol].reward = 0;\n        terrain.grid[nodeRow][nodeCol].visits = 0;\n        tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [props.worldProperties.colors.default]);\n      } else {\n        terrain.grid[nodeRow][nodeCol].status = \"wall\";\n        terrain.grid[nodeRow][nodeCol].visits = -1;\n        terrain.grid[nodeRow][nodeCol].reward = -100;\n        tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [props.worldProperties.colors.wall]);\n      }\n    } //get coordinates of node i just clicked on\n\n  }\n\n  function mouseUpHandler(event) {\n    if (mouseDownX !== event.clientX || mouseDownY !== event.clientY) {\n      return;\n    } else {\n      let nodeId = findNodeId(event.faceIndex);\n\n      if (nodeId.nodeRow === props.worldProperties.start.row && nodeId.nodeCol === props.worldProperties.start.col || nodeId.nodeRow === props.worldProperties.finish.row && nodeId.nodeCol === props.worldProperties.finish.col) {\n        return;\n      } else if (terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status === \"wall\") {\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].reward = 0;\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status = \"default\";\n        tweenToColor(terrain.grid[nodeId.nodeRow][nodeId.nodeCol], groundGeometry, [props.worldProperties.colors.default]); //console.log(terrain.grid[nodeId.nodeRow][nodeId.nodeCol]);\n      } else {\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].reward = -100;\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status = \"wall\";\n        tweenToColor(terrain.grid[nodeId.nodeRow][nodeId.nodeCol], groundGeometry, [props.worldProperties.colors.wall]); //console.log(terrain.grid[nodeId.nodeRow][nodeId.nodeCol]);\n      } //console.log(terrain.grid)\n\n    }\n  }\n\n  function findNodeId(faceIndex) {\n    let linearIndex = Math.floor(faceIndex / 2);\n    return {\n      nodeRow: Math.floor(linearIndex / props.worldProperties.rows),\n      nodeCol: linearIndex % props.worldProperties.cols\n    };\n  }\n\n  function mouseDownHandler(event) {\n    mouseDownX = event.clientX; //set X and Y mouse coordinates when mouseDown\n\n    mouseDownY = event.clientY;\n  }\n\n  function visualizeAlgorithm() {\n    console.log(\"Dijkstra Dijkstra Dijkstra\");\n    clearPath();\n    let nodesToAnimate = [];\n    let processedSuccessfuly;\n    const startNode = terrain.grid[props.worldProperties.start.row][props.worldProperties.start.col];\n    const finishNode = terrain.grid[props.worldProperties.finish.row][props.worldProperties.finish.col];\n\n    if (selectedAlgorithm.type === \"weighted\") {\n      processedSuccessfuly = weightedSearchAlgorithm(terrain.grid, startNode, finishNode, nodesToAnimate, selectedAlgorithm.algorithm, selectedAlgorithm.heuristic);\n      console.log(processedSuccessfuly);\n    } else {\n      processedSuccessfuly = unweightedSearchAlgorithm(terrain.grid, startNode, finishNode, nodesToAnimate, selectedAlgorithm.algorithm);\n    }\n\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode); //add conditions for unweighted and no paths found\n    //console.log(algorithmSpeed + \" is the speed were using\")\n\n    animateAlgorithm(nodesToAnimate, nodesInShortestPathOrder, algorithmSpeed);\n  }\n\n  function animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, timerDelay) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder, 5 * timerDelay);\n        }, timerDelay * i);\n        return;\n      }\n\n      if (visitedNodesInOrder[i].row === props.worldProperties.start.row && visitedNodesInOrder[i].col === props.worldProperties.start.col || visitedNodesInOrder[i].row === props.worldProperties.finish.row && visitedNodesInOrder[i].col === props.worldProperties.finish.col) {\n        continue;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (!node) return;\n        tweenToColor(node, groundGeometry, [{\n          r: 1.0,\n          g: 0.321,\n          b: 0.784\n        }, props.worldProperties.colors.visited], 300, {\n          position: false\n        });\n      }, timerDelay * i);\n    }\n  }\n\n  function animateShortestPath(nodesInShortestPathOrder, timerDelay) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        tweenToColor(node, groundGeometry, [props.worldProperties.colors.path], undefined, {\n          position: false\n        });\n\n        if (i === nodesInShortestPathOrder.length - 1) {}\n      }, timerDelay * i);\n    }\n\n    props.updateRunState(false); //console.log(terrain.grid[5][5]);\n  }\n\n  function animateQlearning() {\n    clearPath();\n    let minimum = -10;\n    let maximum = 100;\n\n    for (let i = 0; i < terrain.records.length; i++) {\n      //let record = terrain.records[i]\n      //if(i > 1300){return;}\n      for (let row = 0; row < 30; row++) {\n        for (let col = 0; col < 30; col++) {\n          const node = terrain.grid[row][col];\n\n          if (terrain.records[i][row][col] === 0 || node.status === \"wall\" || node.status === \"start\" || node.status === \"finish\") {\n            continue;\n          }\n\n          let ratio = 2 * (terrain.records[i][row][col] - minimum) / (maximum - minimum);\n          let blue = Number(Math.max(0, 255 * (1 - ratio)));\n          let red = Number(Math.max(0, 255 * (ratio - 1)));\n          let green = 255 - blue - red;\n          red /= 255;\n          green /= 255;\n          blue /= 255;\n          setTimeout(() => {\n            tweenToColor(node, groundGeometry, [{\n              r: red,\n              g: green,\n              b: blue\n            }], 5, {\n              position: false\n            }); //if (row === 30 - 1) {}\n          }, 1000);\n        }\n      }\n    }\n\n    props.updateRunState(false);\n  }\n\n  function animateOptimalPolicy() {\n    for (let i = 2; i < terrain.optimalPolicy.length; i++) {\n      let headRow = terrain.optimalPolicy[i][0];\n      let headCol = terrain.optimalPolicy[i][1]; //let torsoRow = terrain.optimalPolicy[i-1][0];\n      //let torsoCol = terrain.optimalPolicy[i-1][1];\n\n      let tailRow = terrain.optimalPolicy[i - 1][0];\n      let tailCol = terrain.optimalPolicy[i - 1][1];\n      const head = terrain.grid[headRow][headCol]; //const torso = terrain.grid[torsoRow][torsoCol];\n\n      const tail = terrain.grid[tailRow][tailCol];\n\n      if (head.status === 'start' || tail.status == 'start') {\n        continue;\n      }\n\n      setTimeout(() => {\n        if (head.status === 'finish') return; //terrain.grid[row][col].status = visited;\n        //setTimeout(() => {\n        //tweenToColor(tail, groundGeometry, [props.worldProperties.colors.path], undefined,{position: false});\n        //}, i*props.algorithmSpeed);\n\n        tweenToColor(tail, groundGeometry, [props.worldProperties.colors.path], undefined, {\n          position: false\n        });\n        tweenToColor(head, groundGeometry, [{\n          r: 0,\n          g: 0,\n          b: 0\n        }], undefined, {\n          position: false\n        }); //tweenToColor(torso, groundGeometry, [{r: 0, g: 0, b: 0}], undefined,{position: false});\n      }, 5 * i * props.algorithmSpeed);\n    }\n  }\n\n  function qLearning() {\n    //reset records\n    if (props.settingsConfig.epochs > 0) {\n      terrain.records = [];\n    } //let i = 0;\n    //while(terrain.records.length < 1000){\n\n\n    for (let i = 0; i < props.settingsConfig.epochs; i++) {\n      //if(terrain.records.length > 1300){break;}\n      if (i > 0.75 * props.settingsConfig.epochs) {\n        let y = props.settingsConfig.startRow;\n        let x = props.settingsConfig.startCol;\n        var currentState = [y, x];\n      } else {\n        var currentState = terrain.states[Math.floor(Math.random() * terrain.states.length)];\n      }\n\n      var steps = 0;\n\n      while (!(currentState[0] === props.settingsConfig.finishRow && currentState[1] === props.settingsConfig.finishCol) && terrain.grid[currentState[0]][currentState[1]].status !== \"wall\" && steps < 1000) {\n        //setTimeout(() => {\n        //tweenToColor(terrain.grid[14][14],groundGeometry,[{ r: 1, g: 0.64, b: 0.0}]);\n        //}, props.algorithmSpeed);\n        //let action = chooseAction(currentState, Math.abs(1- (i/props.settingsConfig.epochs)))\n        var curiosity = props.settingsConfig.agentCuriosity;\n\n        if (i > 0.75 * props.settingsConfig.epochs) {\n          curiosity = 0.4;\n        }\n\n        let action = chooseAction(currentState, curiosity);\n        let action_dy = terrain.actions[action][0];\n        let action_dx = terrain.actions[action][1];\n        let nextState = [action_dy + currentState[0], action_dx + currentState[1]];\n        let currentQValue = terrain.q_table[currentState[0]][currentState[1]]; //let maximum_action = chooseAction(currentState, 0)//might need to be nextstate\n        //action_dy = terrain.actions[maximum_action][0]\n        //action_dx = terrain.actions[maximum_action][1]\n\n        let maxState = [action_dy + currentState[0], action_dx + currentState[1]];\n        let maxQValue = terrain.q_table[maxState[0]][maxState[1]];\n        let temporal_difference = terrain.grid[nextState[0]][nextState[1]].reward + terrain.discountFactor * (maxQValue - currentQValue); //let learning_rate = 1 / (1 + terrain.grid[currentState[0]][currentState[1]].visits)\n\n        let q_value = currentQValue + props.settingsConfig.learningRate * temporal_difference;\n        terrain.q_table[currentState[0]][currentState[1]] = parseFloat(q_value.toFixed(2));\n        terrain.grid[currentState[0]][currentState[1]].visits += 1;\n        currentState = nextState;\n        steps++;\n      } //i++;\n\n\n      terrain.records.push(getRecord());\n    }\n\n    props.stopTraining(); //console.log(props.settingsConfig.epochs);\n\n    console.log(terrain.records); //console.log(terrain.grid)\n  }\n\n  function chooseAction(currentState, e_greedy) {\n    var rwc = require(\"random-weighted-choice\");\n\n    let actionOptions = [{\n      weight: e_greedy * 10,\n      id: \"true\"\n    }, {\n      weight: 10 * (1 - e_greedy),\n      id: \"false\"\n    }];\n    let chosenOption = rwc(actionOptions);\n    let takingRandomAction = chosenOption === \"true\"; //true or false;\n\n    let actions = [\"left\", \"down\", \"right\", \"up\"];\n\n    if (takingRandomAction) {\n      //console.log(\"Taking random action\");\n      //let random_index = random.randint(0,len(actions) - 1)\n      while (true) {\n        let randomIndex = Math.floor(Math.random() * actions.length);\n        let selectedAction = actions[randomIndex];\n        let actionChange = terrain.actions[selectedAction];\n\n        if (isValidState([actionChange[0] + currentState[0], actionChange[1] + currentState[1]])) {\n          //console.log(\"When action is random action is: \" + selectedAction)\n          return selectedAction;\n        }\n      }\n    } else {\n      //console.log(\"Taking greedy action\");\n      //let policyCandidates = new WeakMap();\n      let policyCandidates = {};\n\n      for (let action in terrain.actions) {\n        let nextState = [terrain.actions[action][0] + currentState[0], terrain.actions[action][1] + currentState[1]]; //console.log(nextState)\n\n        if (isValidState(nextState)) {\n          //console.log(terrain.q_table);\n          policyCandidates[nextState] = terrain.q_table[nextState[0]][nextState[1]]; //policyCandidates.set(nextState,terrain.q_table[nextState[1]][nextState[0]]);\n        }\n      } //let maxState = max(policy_candidates, key=policy_candidates.get)\n\n\n      let maxQValue = Number(Object.keys(policyCandidates).reduce((a, v) => Math.max(a, policyCandidates[v]), -Infinity));\n      let maxState = Object.keys(policyCandidates).filter(v => policyCandidates[v] === maxQValue); //let maxQValue = policy_candidates[maxState]\n\n      let listOfMax = [];\n\n      for (let maxCandidate in policyCandidates) {\n        if (policyCandidates[maxCandidate] === maxQValue) {\n          let tempVals = maxCandidate.split(\",\").map(Number);\n          listOfMax.push(tempVals);\n        }\n      }\n\n      let randomIndex = Math.floor(Math.random() * listOfMax.length);\n      maxState = listOfMax[randomIndex]; //console.log(listOfMax)\n      //Now we can use the max_state(state with the maximum q value to find the actioned perfomed to get there)\n\n      let action_dy = maxState[0] - currentState[0];\n      let action_dx = maxState[1] - currentState[1];\n\n      for (let action in terrain.actions) {\n        if (terrain.actions[action][0] === action_dy && terrain.actions[action][1] === action_dx) {\n          return action;\n        }\n      }\n    }\n  }\n\n  function isValidState(nextState) {\n    //console.log(nextState)\n    if (nextState[0] < 0 || nextState[0] >= props.worldProperties.rows || nextState[1] < 0 || nextState[1] >= props.worldProperties.cols) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getRecord() {\n    let record = Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0));\n\n    for (let i = 0; i < terrain.states.length; i++) {\n      let state = terrain.states[i];\n      record[state[0]][state[1]] = terrain.q_table[state[0]][state[1]];\n    } //console.log(record)\n\n\n    return record;\n  }\n\n  function resetTerrainConfig() {\n    for (let row = 0; row < 30; row++) {\n      for (let col = 0; col < 30; col++) {\n        if (terrain.grid[row][col].status === \"wall\") {\n          continue;\n        }\n\n        if (row === props.settingsConfig.startRow && col === props.settingsConfig.startCol) {\n          terrain.grid[row][col].status = \"start\";\n          terrain.grid[row][col].onceSpecial = true;\n        } else if (row === props.settingsConfig.finishRow && col === props.settingsConfig.finishCol) {\n          terrain.grid[row][col].status = \"finish\";\n          terrain.grid[row][col].reward = 100;\n          terrain.grid[row][col].onceSpecial = true;\n        } else {\n          terrain.grid[row][col].status = \"default\";\n          terrain.grid[row][col].reward = 0;\n\n          if (terrain.grid[row][col].onceSpecial) {\n            tweenToColor(terrain.grid[row][col], groundGeometry, [props.worldProperties.colors.default]);\n          }\n        }\n      }\n    } //console.log(terrain.records)\n\n\n    props.finishApplyingSettings();\n  }\n\n  function calculateOptimalPolicy() {\n    let currentState = [props.settingsConfig.startRow, props.settingsConfig.startCol];\n    let policyList = [];\n    policyList.push(currentState);\n\n    while (!(currentState[0] === props.settingsConfig.finishRow && currentState[1] === props.settingsConfig.finishCol) && terrain.grid[currentState[0]][currentState[1]].status !== \"wall\") {\n      let maxAction = chooseAction(currentState, props.policyCuriosity);\n      let action_dy = terrain.actions[maxAction][0];\n      let action_dx = terrain.actions[maxAction][1];\n      let nextState = [action_dy + currentState[0], action_dx + currentState[1]];\n      policyList.push(nextState);\n      currentState = nextState; //console.log(maxAction);\n      //console.log(action_dy);\n    }\n\n    terrain.optimalPolicy = policyList;\n  }\n\n  function clearWalls() {\n    for (let i = 0; i < props.worldProperties.rows; i++) {\n      for (let j = 0; j < props.worldProperties.cols; j++) {\n        if (terrain.grid[i][j].status === \"wall\" || terrain.q_table[i][j] < 0) {\n          terrain.grid[i][j].status = \"default\";\n          terrain.grid[i][j].reward = 0;\n          tweenToColor(terrain.grid[i][j], groundGeometry, [props.worldProperties.colors.default]);\n        }\n      }\n    }\n\n    props.stopClearWalls();\n  }\n\n  function clearPath() {\n    TWEEN.removeAll();\n\n    for (let i = 0; i < props.worldProperties.rows; i++) {\n      for (let j = 0; j < props.worldProperties.cols; j++) {\n        if (i === props.worldProperties.start.row && j === props.worldProperties.start.col) {\n          terrain.grid[i][j].status = \"start\";\n          terrain.grid[i][j].visits = -1;\n        }\n\n        if (i === props.worldProperties.finish.row && j === props.worldProperties.finish.col) {\n          terrain.grid[i][j].status = \"finish\";\n        }\n\n        if (terrain.grid[i][j].status === \"visited\" || terrain.grid[i][j].visits > 0) {\n          terrain.grid[i][j].status = \"default\";\n          tweenToColor(terrain.grid[i][j], groundGeometry, [props.worldProperties.colors.default]);\n        }\n\n        terrain.grid[i][j].distance = Infinity;\n        terrain.grid[i][j].totalDistance = Infinity;\n        terrain.grid[i][j].heuristicDistance = null;\n        terrain.grid[i][j].direction = null;\n        terrain.grid[i][j].previousNode = null;\n      }\n    }\n\n    props.stopClearPath();\n  }\n\n  function animateMaze(nodesToAnimate, type, timerDelay) {\n    clearWalls();\n\n    for (let i = 0; i < nodesToAnimate.length; i++) {\n      let nodeRow = nodesToAnimate[i].row;\n      let nodeCol = nodesToAnimate[i].col;\n      setTimeout(() => {\n        //const node = nodesToAnimate[i];\n        // node.status = type;\n        terrain.grid[nodeRow][nodeCol].status = \"wall\";\n        terrain.grid[nodeRow][nodeCol].reward = -100;\n        terrain.grid[nodeRow][nodeCol].visits = -1;\n        tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [props.worldProperties.colors.wall]);\n      }, timerDelay * i);\n      props.stopMazeSelection();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    position: [0, 0, 0],\n    children: [/*#__PURE__*/_jsxDEV(\"gridHelper\", {\n      args: [300, props.gridDimensions, 0x5c78bd, 0x5c78bd]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [-Math.PI / 2, 0, 0],\n      position: [0, -0.1, 0],\n      receiveShadow: true,\n      onPointerDown: e => {\n        mouseIsUp = false;\n        mouseDownHandler(e);\n      },\n      onPointerUp: e => {\n        if (props.resetStatus === true || mouseIsUp === true) {\n          mouseIsUp = true;\n        }\n\n        mouseUpHandler(e);\n      },\n      onPointerMove: e => {\n        if (mouseIsUp === true || props.resetStatus === false) {\n          return;\n        } else if (mouseIsUp === false) {\n          currentHoverNodeId = Math.floor(e.faceIndex / 2);\n          return;\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        attach: \"geometry\",\n        object: groundGeometry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"primitive\", {\n        attach: \"material\",\n        object: groundMaterial\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"axesHelper\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 771,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Grid, \"n+TUyW697OuQIvN+XoDSauICYeA=\", false, function () {\n  return [useThree];\n});\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/Afraa/Documents/3D-Pathfinding-Visualizer/src/components/Grid.js"],"names":["React","useState","useRef","useEffect","useMemo","THREE","img","tweenToColor","getNodesInShortestPathOrder","TWEEN","weightedSearchAlgorithm","unweightedSearchAlgorithm","randomMaze","recursiveDivisionMaze","useThree","tf","math","Grid","props","groundMaterial","groundMesh","mouseDownX","mouseDownY","previousHoverNodeId","currentHoverNodeId","mouseIsUp","groundGeometry","setGroundGeometry","PlaneGeometry","selectedAlgorithm","selectedMazeAlgorithm","runState","worldProperties","trainTheAgent","trainAgent","clearTheWalls","clearWalls","clearThePath","clearPath","algorithmSpeed","agentKnowledge","applyingSettings","visualizeThePolicy","visualizeOptimalPolicy","camera","resetTerrainConfig","calculateOptimalPolicy","animateOptimalPolicy","finishedOptimalPolicy","terrain","records","q_table","Array","rows","fill","map","cols","agentResetDone","type","animateQlearning","visualizeAlgorithm","qLearning","nodesToAnimate","grid","animateMaze","length","loader","TextureLoader","load","texture","wrapS","RepeatWrapping","wrapT","repeat","x","y","MeshLambertMaterial","side","FrontSide","vertexColors","FaceColors","Mesh","receiveShadow","mesh","setTerrain","initializeGrid","states","initStates","optimalPolicy","actions","discountFactor","alpha","start","settingsConfig","startRow","startCol","finish","finishRow","finishCol","tempGrid","i","currentRow","j","node","createNode","push","renderLoop","console","log","processedSuccessfully","startNode","row","col","finishNode","algorithm","heuristic","nQueensAlgorithm","gridSize","animateAlgorithm","updateRunState","nodesInShortestPathOrder","status","faces","faceIndex","id","distance","Infinity","totalDistance","heuristicDistance","direction","weight","qValue","reward","visits","onceSpecial","previousNode","colors","tempStateGrid","window","requestAnimationFrame","hoverLoop","update","nodeRow","Math","floor","nodeCol","default","wall","mouseUpHandler","event","clientX","clientY","nodeId","findNodeId","linearIndex","mouseDownHandler","processedSuccessfuly","visitedNodesInOrder","timerDelay","setTimeout","animateShortestPath","r","g","b","visited","position","path","undefined","minimum","maximum","ratio","blue","Number","max","red","green","headRow","headCol","tailRow","tailCol","head","tail","epochs","currentState","random","steps","curiosity","agentCuriosity","action","chooseAction","action_dy","action_dx","nextState","currentQValue","maxState","maxQValue","temporal_difference","q_value","learningRate","parseFloat","toFixed","getRecord","stopTraining","e_greedy","rwc","require","actionOptions","chosenOption","takingRandomAction","randomIndex","selectedAction","actionChange","isValidState","policyCandidates","Object","keys","reduce","a","v","filter","listOfMax","maxCandidate","tempVals","split","record","state","finishApplyingSettings","policyList","maxAction","policyCuriosity","stopClearWalls","removeAll","stopClearPath","stopMazeSelection","gridDimensions","PI","e","resetStatus"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react'\r\nimport * as THREE from 'three'\r\nimport img from './floor_texture.jpg';\r\nimport { tweenToColor, getNodesInShortestPathOrder } from './algorithms/helpers'\r\nimport TWEEN from '@tweenjs/tween.js';\r\nimport { weightedSearchAlgorithm } from \"./algorithms/weightedSearchAlgorithm.js\";\r\nimport { unweightedSearchAlgorithm } from \"./algorithms/unweightedSearchAlgorithm.js\";\r\nimport { randomMaze, recursiveDivisionMaze } from './algorithms/mazeAlgorithms';\r\n\r\nimport { useThree } from 'react-three-fiber';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { math } from '@tensorflow/tfjs';\r\n\r\n\r\n\r\n\r\nfunction Grid(props) {\r\n\r\n  let groundMaterial;\r\n  let groundMesh;\r\n  let mouseDownX = 0;\r\n  let mouseDownY = 0;\r\n  let previousHoverNodeId;\r\n  let currentHoverNodeId;\r\n\r\n  let mouseIsUp = true;\r\n  \r\n  const [groundGeometry, setGroundGeometry] = useState(new THREE.PlaneGeometry(300,300,30,30));\r\n  \r\n  const selectedAlgorithm = props.selectedAlgorithm;\r\n  const selectedMazeAlgorithm = props.selectedMazeAlgorithm;\r\n  const runState = props.worldProperties.runState;\r\n  const trainTheAgent = props.worldProperties.trainAgent;\r\n  const clearTheWalls = props.worldProperties.clearWalls; //rename this variable\r\n  const clearThePath = props.worldProperties.clearPath; // rename this variable too\r\n  const algorithmSpeed = props.algorithmSpeed;\r\n  const agentKnowledge = props.agentKnowledge;\r\n  const applyingSettings = props.applyingSettings;\r\n\r\n  const visualizeThePolicy = props.visualizeOptimalPolicy;\r\n  \r\n  const {\r\n    camera,\r\n  } = useThree();\r\n\r\n  useEffect(() => {\r\n    if(props.applyingSettings){\r\n      resetTerrainConfig();\r\n    }\r\n    if(props.visualizeOptimalPolicy){\r\n      calculateOptimalPolicy();\r\n      animateOptimalPolicy();\r\n      props.finishedOptimalPolicy();\r\n    }\r\n  },[applyingSettings, visualizeThePolicy]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if(props.agentKnowledge ===\"clearMemory\"){\r\n      terrain.records = [];\r\n      terrain.q_table = Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0));\r\n      //clearPath();\r\n      props.agentResetDone();\r\n    }\r\n    if(props.worldProperties.runState === true){\r\n      if(props.selectedAlgorithm.type === \"machine-learning\"){\r\n        animateQlearning()\r\n      }\r\n      else{\r\n      visualizeAlgorithm();\r\n      }\r\n    }\r\n    else if(props.worldProperties.clearWalls === true){\r\n      clearWalls();\r\n    }\r\n    else if(props.worldProperties.clearPath === true){\r\n      clearPath();\r\n    }\r\n    else if(props.worldProperties.trainAgent === true){\r\n      qLearning();\r\n    }\r\n    else if(props.selectedMazeAlgorithm === \"randomMaze\"){\r\n      clearPath();\r\n      let nodesToAnimate = [];\r\n      randomMaze(terrain.grid, nodesToAnimate, \"wall\");\r\n      animateMaze(nodesToAnimate, \"wall\", 30);\r\n    }\r\n    else if(props.selectedMazeAlgorithm === \"recursiveDivision\"){\r\n      clearPath();\r\n      let nodesToAnimate = [];\r\n      recursiveDivisionMaze(\r\n        terrain.grid, \r\n        2, \r\n        terrain.grid.length - 3,\r\n         2, \r\n         terrain.grid.length - 3, \r\n         \"horizontal\",\r\n         false,\r\n         nodesToAnimate,\r\n         \"wall\");\r\n\r\n         animateMaze(nodesToAnimate, \"wall\", 30)\r\n    }\r\n  }, [runState, clearTheWalls, clearThePath, selectedMazeAlgorithm, trainTheAgent,agentKnowledge,]);\r\n\r\n\r\n  const loader = useMemo(() => new THREE.TextureLoader().load(img,\r\n    function(texture){\r\n        texture.wrapS = THREE.RepeatWrapping;\r\n        texture.wrapT = THREE.RepeatWrapping;\r\n        texture.repeat.x = 30;\r\n        texture.repeat.y = 30;\r\n        groundMaterial = new THREE.MeshLambertMaterial({\r\n          map: texture,\r\n          side: THREE.FrontSide,\r\n          vertexColors: THREE.FaceColors,\r\n        });\r\n        groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);\r\n\t\t\t\tgroundMesh.receiveShadow = true;\r\n    }), [img]);\r\n\r\n    \r\n    \r\n    groundMaterial = new THREE.MeshLambertMaterial({\r\n      map: loader,\r\n      side: THREE.FrontSide,\r\n      vertexColors: THREE.FaceColors,\r\n    });\r\n\r\n    const mesh = useRef(null);\r\n    \r\n    \r\n    const [terrain, setTerrain] = useState({\r\n      grid: initializeGrid(),\r\n      states: initStates(),\r\n      q_table: Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0)),\r\n      records: [],\r\n      optimalPolicy: [],\r\n      actions : { \"left\":[0,-1], \"down\":[1,0],\"right\":[0,1], \"up\":[-1,0]},\r\n      //visits: Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0)),\r\n      discountFactor: 0.8,\r\n      alpha: 0.1,\r\n      start: [props.settingsConfig.startRow,props.settingsConfig.startCol],\r\n      finish: [props.settingsConfig.finishRow,props.settingsConfig.finishCol]\r\n    });\r\n\r\n  function initializeGrid(){\r\n    let tempGrid = []\r\n    for(let i = 0; i < 30; i++){\r\n        let currentRow = [];\r\n        for(let j = 0; j < 30; j++){\r\n            let node = createNode(i, j);\r\n            currentRow.push(node);\r\n        }\r\n        tempGrid.push(currentRow);\r\n    }\r\n    /*var vertices = new Float32Array(5400).fill(0);\r\n\r\n    groundGeometry.setAttribute('color', new THREE.Float32BufferAttribute( vertices,3) );\r\n    vertices[0] = 0\r\n    vertices[1]= 1\r\n    vertices[2]= 0\r\n\r\n    \r\n\r\n    console.log(groundGeometry.getAttribute('color'))\r\n    const tween1 = new TWEEN.Tween(groundGeometry.getAttribute('color'))\r\n                    .to(new THREE.Float32BufferAttribute( vertices,2) ,9000)\r\n\r\n    tween1.start()\r\n\r\n    tween1.onUpdate(function (object: THREE.BufferAttribute | THREE.InterleavedBufferAttribute, elapsed: number){\r\n      groundGeometry.setAttribute('color',object)\r\n    })\r\n    \r\n   \r\n    //console.log(vertices)\r\n    groundGeometry.setAttribute('color', new THREE.Float32BufferAttribute( vertices,2) );*/\r\n\r\n    //setState(tempStateGrid)\r\n    renderLoop();\r\n   return tempGrid;\r\n  }   \r\n  function visualizeAlgorithm() {\r\n    console.log(\"Dijkstra Dijkstra Dijkstra\");\r\n    clearPath();\r\n    let nodesToAnimate = [];\r\n    let processedSuccessfully;\r\n    const startNode = terrain.grid[props.worldProperties.start.row][props.worldProperties.start.col];\r\n    const finishNode = terrain.grid[props.worldProperties.finish.row][props.worldProperties.finish.col];\r\n    \r\n    if (selectedAlgorithm.type === \"weighted\") {\r\n      processedSuccessfully = weightedSearchAlgorithm(\r\n        terrain.grid,\r\n        startNode,\r\n        finishNode,\r\n        nodesToAnimate,\r\n        selectedAlgorithm.algorithm,\r\n        selectedAlgorithm.heuristic,\r\n      );\r\n      console.log(processedSuccessfully);\r\n    }\r\n    else if (selectedAlgorithm.type === \"unweighted\") {\r\n      processedSuccessfully = unweightedSearchAlgorithm(\r\n        terrain.grid,\r\n        startNode,\r\n        finishNode,\r\n        nodesToAnimate,\r\n        selectedAlgorithm.algorithm,\r\n      );\r\n    }\r\n    else if (selectedAlgorithm.algorithm === \"nQueens\") {\r\n      // For N-Queens, we don't need start/finish nodes\r\n      processedSuccessfully = nQueensAlgorithm(\r\n        terrain.grid,\r\n        nodesToAnimate,\r\n        props.worldProperties.gridSize || 8 // Default to 8 if gridSize not specified\r\n      );\r\n      // N-Queens doesn't have a path, just animate the solution\r\n      animateAlgorithm(nodesToAnimate, [], algorithmSpeed);\r\n      props.updateRunState(false);\r\n      return; // Early return since we don't need path animation\r\n    }\r\n\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    animateAlgorithm(nodesToAnimate, nodesInShortestPathOrder, algorithmSpeed);\r\n  }\r\n\r\n  function createNode(row, col){\r\n\r\n    let status = \"default\";\r\n    let faces = {};\r\n\r\n    let faceIndex = row * 2 * props.worldProperties.cols + col * 2 ;\r\n  \r\n    faces[1] = groundGeometry.faces[faceIndex];\r\n\r\n\r\n    faceIndex = faceIndex % 2 === 0 ? faceIndex + 1 : faceIndex - 1;\r\n    faces[2] = groundGeometry.faces[faceIndex];\r\n\r\n    if(row === props.worldProperties.start.row && col === props.worldProperties.start.col){\r\n      status = \"start\";\r\n    }\r\n    else if(row === props.worldProperties.finish.row && col === props.worldProperties.finish.col){\r\n      status = \"finish\";\r\n    }\r\n    let node = {\r\n        id: row * props.worldProperties.cols + col,\r\n        row: row,\r\n        col: col,\r\n        faces: faces,\r\n        status: status,\r\n        distance: Infinity,\r\n        totalDistance: Infinity,\r\n        heuristicDistance: null,\r\n        direction: null,\r\n        weight: 0,\r\n        qValue: 0,\r\n        reward: 0,\r\n        visits: 0,\r\n        onceSpecial: false,\r\n        previousNode: null,\r\n    };\r\n    if(status === \"start\"){\r\n      node.onceSpecial = true;\r\n      tweenToColor(node, groundGeometry, [props.worldProperties.colors.start]);\r\n      \r\n    }\r\n    else if(status === \"finish\"){\r\n      node.reward = 100;\r\n      node.onceSpecial = true;\r\n      tweenToColor(node, groundGeometry, [props.worldProperties.colors.finish]);\r\n    }\r\n    return node;\r\n  }\r\n  function initStates(){\r\n    let tempStateGrid = [];\r\n    for(let row = 0; row < props.worldProperties.rows; row++){\r\n      for(let col = 0; col < props.worldProperties.cols;col++){\r\n        tempStateGrid.push([row,col]);\r\n      }\r\n    }\r\n    //console.log(tempStateGrid)\r\n    return tempStateGrid;\r\n  }\r\n  /*function initializeVisits(){\r\n    let visits = {}\r\n    let tempStates = initStates()\r\n    for(let row = 0; row < tempStates.length; row++){\r\n      for(let col = 0; col < tempStates[0].length; col++){\r\n        let state = tempStates[row][col]\r\n        visits[state] = 0;\r\n      }\r\n    }\r\n    return visits;\r\n  }*/\r\n\r\n  function renderLoop(){\r\n    window.requestAnimationFrame(renderLoop);\r\n    //if(props.resetStatus){\r\n      hoverLoop();\r\n   // }\r\n    TWEEN.update();\r\n  }\r\n\r\n  function hoverLoop(){\r\n    if(mouseIsUp || currentHoverNodeId === previousHoverNodeId){\r\n      return;\r\n    }\r\n    else{\r\n      previousHoverNodeId = currentHoverNodeId;\r\n      let nodeRow = Math.floor(currentHoverNodeId / props.worldProperties.rows);\r\n      let nodeCol = currentHoverNodeId % props.worldProperties.cols\r\n      if((nodeRow === props.worldProperties.start.row && nodeCol === props.worldProperties.start.col) \r\n        || (nodeRow === props.worldProperties.finish.row && nodeCol === props.worldProperties.finish.col)){\r\n        return;\r\n      }\r\n      else if(terrain.grid[nodeRow][nodeCol].status === \"wall\"){\r\n        terrain.grid[nodeRow][nodeCol].status = \"default\";\r\n       terrain.grid[nodeRow][nodeCol].reward = 0;\r\n        terrain.grid[nodeRow][nodeCol].visits = 0;\r\n        tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [props.worldProperties.colors.default]);\r\n      }\r\n      else\r\n      {\r\n        terrain.grid[nodeRow][nodeCol].status = \"wall\";\r\n        terrain.grid[nodeRow][nodeCol].visits = -1;\r\n       terrain.grid[nodeRow][nodeCol].reward = -100;\r\n        tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [props.worldProperties.colors.wall]);\r\n      }\r\n    \r\n    }\r\n    //get coordinates of node i just clicked on\r\n    \r\n  }\r\n\r\n  function mouseUpHandler(event){\r\n    if((mouseDownX !== event.clientX) || (mouseDownY !== event.clientY)){\r\n      return;\r\n    }\r\n    else\r\n    {\r\n      let nodeId = findNodeId(event.faceIndex);\r\n      if((nodeId.nodeRow === props.worldProperties.start.row && nodeId.nodeCol === props.worldProperties.start.col) \r\n        || (nodeId.nodeRow === props.worldProperties.finish.row && nodeId.nodeCol === props.worldProperties.finish.col)){\r\n      return;\r\n      }\r\n      else if(terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status === \"wall\"){\r\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].reward = 0;\r\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status = \"default\";\r\n        tweenToColor(terrain.grid[nodeId.nodeRow][nodeId.nodeCol], groundGeometry, [props.worldProperties.colors.default]);\r\n        //console.log(terrain.grid[nodeId.nodeRow][nodeId.nodeCol]);\r\n      }\r\n      else\r\n      {\r\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].reward = -100;\r\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status = \"wall\";\r\n        tweenToColor(terrain.grid[nodeId.nodeRow][nodeId.nodeCol], groundGeometry, [props.worldProperties.colors.wall]);\r\n        //console.log(terrain.grid[nodeId.nodeRow][nodeId.nodeCol]);\r\n      }\r\n      //console.log(terrain.grid)\r\n    }\r\n\r\n  }\r\n    \r\n  \r\n  function findNodeId(faceIndex){\r\n    let linearIndex = Math.floor(faceIndex / 2);\r\n    return {\r\n      nodeRow: Math.floor(linearIndex / props.worldProperties.rows),\r\n      nodeCol: linearIndex % props.worldProperties.cols,\r\n    }\r\n  }\r\n  function mouseDownHandler(event){\r\n      mouseDownX = event.clientX;     //set X and Y mouse coordinates when mouseDown\r\n      mouseDownY = event.clientY;\r\n  }\r\n  \r\n  function visualizeAlgorithm(){\r\n    console.log(\"Dijkstra Dijkstra Dijkstra\");\r\n    clearPath();\r\n    let nodesToAnimate = [];\r\n    let processedSuccessfuly;\r\n    const startNode = terrain.grid[props.worldProperties.start.row][props.worldProperties.start.col];\r\n    const finishNode = terrain.grid[props.worldProperties.finish.row][props.worldProperties.finish.col];\r\n    if(selectedAlgorithm.type === \"weighted\"){\r\n      processedSuccessfuly = weightedSearchAlgorithm(\r\n        terrain.grid,\r\n        startNode,\r\n        finishNode,\r\n        nodesToAnimate,\r\n        selectedAlgorithm.algorithm,\r\n        selectedAlgorithm.heuristic,\r\n      );\r\n      console.log(processedSuccessfuly);\r\n    }\r\n    else{\r\n      processedSuccessfuly = unweightedSearchAlgorithm(\r\n        terrain.grid,\r\n        startNode,\r\n        finishNode,\r\n        nodesToAnimate,\r\n        selectedAlgorithm.algorithm,\r\n      );\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    //add conditions for unweighted and no paths found\r\n    //console.log(algorithmSpeed + \" is the speed were using\")\r\n    animateAlgorithm(nodesToAnimate, nodesInShortestPathOrder, algorithmSpeed);\r\n    \r\n    \r\n  }\r\n  function animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder, timerDelay){\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n\t\t\t\tif (i === visitedNodesInOrder.length) {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tanimateShortestPath(nodesInShortestPathOrder, 5 * timerDelay);\r\n\t\t\t\t\t}, timerDelay * i);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif ((visitedNodesInOrder[i].row === props.worldProperties.start.row &&\r\n            visitedNodesInOrder[i].col === props.worldProperties.start.col) ||\r\n\t\t\t\t\t(visitedNodesInOrder[i].row === props.worldProperties.finish.row &&\r\n\t\t\t\t\t\tvisitedNodesInOrder[i].col === props.worldProperties.finish.col)\r\n\t\t\t\t) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconst node = visitedNodesInOrder[i];\r\n\t\t\t\t\tif (!node) return;\r\n\t\t\t\t\ttweenToColor(\r\n\t\t\t\t\t\tnode,\r\n\t\t\t\t\t\tgroundGeometry,\r\n\t\t\t\t\t\t[{ r: 1.0, g: 0.321, b: 0.784 }, props.worldProperties.colors.visited],\r\n\t\t\t\t\t\t300,\r\n\t\t\t\t\t\t{ position: false }\r\n\t\t\t\t\t);\r\n\t\t\t\t}, timerDelay * i);\r\n      }\r\n      \r\n  }\r\n  function animateShortestPath(nodesInShortestPathOrder, timerDelay){\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        tweenToColor(node, groundGeometry, [props.worldProperties.colors.path], undefined, {\r\n          position: false,\r\n        });\r\n        if (i === nodesInShortestPathOrder.length - 1) {\r\n                }\r\n      }, timerDelay * i);\r\n    }\r\n    props.updateRunState(false);\r\n    //console.log(terrain.grid[5][5]);\r\n  }\r\n\r\n  function animateQlearning(){\r\n    clearPath();\r\n    let minimum = -10;\r\n    let maximum = 100;\r\n    for(let i = 0; i < terrain.records.length;i++){\r\n      //let record = terrain.records[i]\r\n      //if(i > 1300){return;}\r\n      for(let row = 0; row < 30; row++){\r\n        for(let col = 0; col < 30; col++){ \r\n          const node = terrain.grid[row][col];\r\n          if(terrain.records[i][row][col] === 0 || node.status === \"wall\" || node.status === \"start\" || node.status === \"finish\"){continue;}\r\n          let ratio = 2 * (terrain.records[i][row][col]-minimum) / (maximum - minimum)\r\n          let blue = Number(Math.max(0, 255*(1 - ratio)))\r\n          let red = Number(Math.max(0, 255*(ratio - 1)))\r\n          let green = 255 - blue - red\r\n\r\n          red /= 255;\r\n          green /= 255;\r\n          blue /= 255;\r\n          \r\n          setTimeout(() => {\r\n            tweenToColor(node, groundGeometry, [{r: red, g: green, b: blue}], 5,{position: false});\r\n            //if (row === 30 - 1) {}\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n    props.updateRunState(false);\r\n  }\r\n  function animateOptimalPolicy(){\r\n    for(let i = 2; i < terrain.optimalPolicy.length;i++){\r\n      let headRow = terrain.optimalPolicy[i][0];\r\n      let headCol = terrain.optimalPolicy[i][1];\r\n      //let torsoRow = terrain.optimalPolicy[i-1][0];\r\n      //let torsoCol = terrain.optimalPolicy[i-1][1];\r\n      let tailRow = terrain.optimalPolicy[i-1][0];\r\n      let tailCol = terrain.optimalPolicy[i-1][1];\r\n\r\n      const head = terrain.grid[headRow][headCol];\r\n      //const torso = terrain.grid[torsoRow][torsoCol];\r\n      const tail = terrain.grid[tailRow][tailCol];\r\n      if (head.status === 'start'|| tail.status == 'start'){continue;}\r\n\r\n\r\n      setTimeout(() => {\r\n        if (head.status === 'finish' ) return;\r\n        //terrain.grid[row][col].status = visited;\r\n        \r\n        //setTimeout(() => {\r\n        //tweenToColor(tail, groundGeometry, [props.worldProperties.colors.path], undefined,{position: false});\r\n        //}, i*props.algorithmSpeed);\r\n\r\n\r\n        tweenToColor(tail, groundGeometry, [props.worldProperties.colors.path], undefined,{position: false});\r\n        tweenToColor(head, groundGeometry, [{r: 0, g: 0, b: 0}], undefined,{position: false});\r\n        //tweenToColor(torso, groundGeometry, [{r: 0, g: 0, b: 0}], undefined,{position: false});\r\n\r\n      }, 5*i*props.algorithmSpeed);\r\n\r\n    }\r\n  }\r\n  function qLearning(){\r\n    //reset records\r\n    if(props.settingsConfig.epochs > 0){\r\n      terrain.records = [];\r\n    }\r\n    //let i = 0;\r\n    //while(terrain.records.length < 1000){\r\n    for(let i = 0; i < props.settingsConfig.epochs; i++){\r\n      //if(terrain.records.length > 1300){break;}\r\n      if(i > 0.75*props.settingsConfig.epochs){\r\n        let y = props.settingsConfig.startRow;\r\n        let x = props.settingsConfig.startCol;\r\n        var currentState = [y,x]; \r\n      }\r\n      else{\r\n        var currentState = terrain.states[Math.floor(Math.random() * terrain.states.length)]\r\n\r\n      }\r\n      var steps = 0;\r\n      while(!(currentState[0] === props.settingsConfig.finishRow && currentState[1] === props.settingsConfig.finishCol)\r\n        && terrain.grid[currentState[0]][currentState[1]].status !== \"wall\" && steps < 1000){\r\n        \r\n          //setTimeout(() => {\r\n           //tweenToColor(terrain.grid[14][14],groundGeometry,[{ r: 1, g: 0.64, b: 0.0}]);\r\n          //}, props.algorithmSpeed);\r\n          \r\n          \r\n          //let action = chooseAction(currentState, Math.abs(1- (i/props.settingsConfig.epochs)))\r\n          var curiosity = props.settingsConfig.agentCuriosity;\r\n          if(i > 0.75*props.settingsConfig.epochs){\r\n            curiosity = 0.4;\r\n          }\r\n          let action = chooseAction(currentState, curiosity)\r\n          let action_dy = terrain.actions[action][0]\r\n\t\t\t\t  let action_dx = terrain.actions[action][1]\r\n\t\t\t\t  let nextState = [action_dy + currentState[0], action_dx + currentState[1]]\r\n\r\n\r\n          let currentQValue = terrain.q_table[currentState[0]][currentState[1]]\r\n\t\t\t\t  //let maximum_action = chooseAction(currentState, 0)//might need to be nextstate\r\n\t\t\t\t\r\n          //action_dy = terrain.actions[maximum_action][0]\r\n\t\t\t\t  //action_dx = terrain.actions[maximum_action][1]\r\n\r\n\t\t\t\t  let maxState = [action_dy + currentState[0], action_dx + currentState[1]];\r\n\t\t\t\t  let maxQValue = terrain.q_table[maxState[0]][maxState[1]]\r\n\r\n          let temporal_difference = (terrain.grid[nextState[0]][nextState[1]].reward + terrain.discountFactor *(maxQValue - currentQValue)  ); \r\n\t\t\t\t  \r\n          //let learning_rate = 1 / (1 + terrain.grid[currentState[0]][currentState[1]].visits)\r\n\r\n          let q_value = currentQValue + (props.settingsConfig.learningRate * (temporal_difference));\r\n\t\t\t\t  terrain.q_table[currentState[0]][currentState[1]] = parseFloat(q_value.toFixed(2));\r\n\r\n          terrain.grid[currentState[0]][currentState[1]].visits+=1;\r\n          currentState = nextState;\r\n          steps++;\r\n         \r\n\r\n      }\r\n        //i++;\r\n        terrain.records.push(getRecord())\r\n    }\r\n    props.stopTraining();\r\n    //console.log(props.settingsConfig.epochs);\r\n    console.log(terrain.records)\r\n    //console.log(terrain.grid)\r\n  }\r\n  function chooseAction(currentState,e_greedy){\r\n    var rwc = require(\"random-weighted-choice\");\r\n    \r\n    let actionOptions = [\r\n      {weight: e_greedy * 10, id: \"true\"},\r\n      {weight: 10*(1 - e_greedy), id: \"false\"}\r\n    ];\r\n    let chosenOption = rwc(actionOptions)\r\n    let takingRandomAction = (chosenOption === \"true\");//true or false;\r\n    let actions = [\"left\",\"down\",\"right\",\"up\"];\r\n    \r\n    if(takingRandomAction){\r\n      //console.log(\"Taking random action\");\r\n      //let random_index = random.randint(0,len(actions) - 1)\r\n      while(true){\r\n        let randomIndex = Math.floor(Math.random() * actions.length)\r\n\t\t\t  let selectedAction = actions[randomIndex]\r\n\t\t\t  let actionChange = terrain.actions[selectedAction]\r\n        if(isValidState([actionChange[0] + currentState[0],actionChange[1] + currentState[1]])){\r\n          //console.log(\"When action is random action is: \" + selectedAction)\r\n          return selectedAction;\r\n        }\r\n      }\r\n    }\r\n    else{\r\n      //console.log(\"Taking greedy action\");\r\n      //let policyCandidates = new WeakMap();\r\n      let policyCandidates = {};\r\n      for(let action in terrain.actions){\r\n        let nextState = [terrain.actions[action][0]+currentState[0],terrain.actions[action][1]+currentState[1]]\r\n        //console.log(nextState)\r\n        if (isValidState(nextState)){\r\n\t\t\t\t  //console.log(terrain.q_table);\r\n\t\t\t\t\tpolicyCandidates[nextState] = terrain.q_table[nextState[0]][nextState[1]]\r\n          //policyCandidates.set(nextState,terrain.q_table[nextState[1]][nextState[0]]);\r\n        }\r\n      }\r\n      //let maxState = max(policy_candidates, key=policy_candidates.get)\r\n      let maxQValue = Number(Object.keys(policyCandidates).reduce((a, v) => Math.max(a, policyCandidates[v]), -Infinity));\r\n      let maxState = Object.keys(policyCandidates).filter(v => policyCandidates[v] === maxQValue);\r\n\r\n\t\t\t//let maxQValue = policy_candidates[maxState]\r\n\t\t\tlet listOfMax = [];\r\n      for(let maxCandidate in policyCandidates){\r\n        if(policyCandidates[maxCandidate] === maxQValue){\r\n          let tempVals = maxCandidate.split(\",\").map(Number)\r\n          listOfMax.push(tempVals);\r\n        }\r\n      }\r\n      let randomIndex = Math.floor(Math.random() * listOfMax.length);\r\n\t\t\tmaxState = listOfMax[randomIndex];\r\n      //console.log(listOfMax)\r\n      //Now we can use the max_state(state with the maximum q value to find the actioned perfomed to get there)\r\n\t\t\tlet action_dy = maxState[0] - currentState[0];\r\n\t\t\tlet action_dx = maxState[1] - currentState[1];\r\n\r\n      for(let action in terrain.actions){\r\n        if(terrain.actions[action][0] === action_dy && terrain.actions[action][1] === action_dx){\r\n          return action;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n  function isValidState(nextState){\r\n    //console.log(nextState)\r\n    if (nextState[0] < 0 || nextState[0] >= props.worldProperties.rows || \r\n        nextState[1] < 0 || nextState[1] >= props.worldProperties.cols){return false;}\r\n\t\treturn true\r\n  }\r\n  function getRecord(){\r\n    let record =  Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0))\r\n    for(let i = 0; i < terrain.states.length; i++){\r\n      let state = terrain.states[i]\r\n\t\t\trecord[state[0]][state[1]] = terrain.q_table[state[0]][state[1]]\r\n    }\r\n    //console.log(record)\r\n    return record;\r\n  }\r\n  function resetTerrainConfig(){\r\n    for(let row = 0; row < 30; row++){\r\n      for(let col = 0; col < 30; col++){\r\n        if(terrain.grid[row][col].status === \"wall\"){\r\n          continue;\r\n        }\r\n        if(row === props.settingsConfig.startRow && col  === props.settingsConfig.startCol){\r\n          terrain.grid[row][col].status = \"start\";\r\n          terrain.grid[row][col].onceSpecial = true;\r\n        }\r\n        else if(row === props.settingsConfig.finishRow && col === props.settingsConfig.finishCol){\r\n          terrain.grid[row][col].status = \"finish\";\r\n          terrain.grid[row][col].reward = 100;\r\n          terrain.grid[row][col].onceSpecial = true;\r\n\r\n        }\r\n        else{\r\n          terrain.grid[row][col].status = \"default\";\r\n          terrain.grid[row][col].reward = 0;\r\n          if(terrain.grid[row][col].onceSpecial){\r\n          tweenToColor(terrain.grid[row][col], groundGeometry, [props.worldProperties.colors.default]);\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n    //console.log(terrain.records)\r\n    props.finishApplyingSettings();\r\n  }\r\n\r\n  function calculateOptimalPolicy(){\r\n    let currentState = [props.settingsConfig.startRow, props.settingsConfig.startCol];\r\n    let policyList = [];\r\n    policyList.push(currentState);\r\n    \r\n    while(!(currentState[0] === props.settingsConfig.finishRow && currentState[1] === props.settingsConfig.finishCol)\r\n    && terrain.grid[currentState[0]][currentState[1]].status !== \"wall\"){\r\n      let maxAction = chooseAction(currentState,props.policyCuriosity);\r\n      let action_dy = terrain.actions[maxAction][0];\r\n      let action_dx = terrain.actions[maxAction][1];\r\n\r\n      let nextState = [action_dy + currentState[0], action_dx + currentState[1]];\r\n      policyList.push(nextState);\r\n      currentState = nextState;\r\n      //console.log(maxAction);\r\n      //console.log(action_dy);\r\n    }\r\n    terrain.optimalPolicy = policyList; \r\n  }\r\n\r\n  function clearWalls(){\r\n    for(let i = 0; i < props.worldProperties.rows; i++){\r\n      for(let j = 0; j < props.worldProperties.cols; j++){\r\n        if(terrain.grid[i][j].status === \"wall\" || terrain.q_table[i][j] < 0){\r\n          terrain.grid[i][j].status = \"default\";\r\n          terrain.grid[i][j].reward = 0;\r\n          tweenToColor(terrain.grid[i][j], groundGeometry, [props.worldProperties.colors.default])\r\n        }\r\n      }\r\n    }\r\n    props.stopClearWalls();\r\n  }\r\n  function clearPath(){\r\n    TWEEN.removeAll();\r\n    for(let i = 0; i < props.worldProperties.rows; i++){\r\n      for(let j = 0; j < props.worldProperties.cols; j++){\r\n        if(i === props.worldProperties.start.row && j === props.worldProperties.start.col){\r\n          terrain.grid[i][j].status = \"start\";\r\n          terrain.grid[i][j].visits = -1; \r\n        }\r\n        if(i === props.worldProperties.finish.row && j === props.worldProperties.finish.col){\r\n          terrain.grid[i][j].status = \"finish\"; \r\n        }\r\n        \r\n        if(terrain.grid[i][j].status === \"visited\" || terrain.grid[i][j].visits > 0 ){\r\n          terrain.grid[i][j].status = \"default\";\r\n          tweenToColor(terrain.grid[i][j], groundGeometry, [props.worldProperties.colors.default]);\r\n        }\r\n        terrain.grid[i][j].distance = Infinity;\r\n        terrain.grid[i][j].totalDistance = Infinity;\r\n        terrain.grid[i][j].heuristicDistance = null;\r\n        terrain.grid[i][j].direction = null;\r\n        terrain.grid[i][j].previousNode = null;\r\n      }\r\n    }\r\n    props.stopClearPath();\r\n  }\r\n  function animateMaze(nodesToAnimate, type, timerDelay){\r\n    clearWalls();\r\n    for(let i = 0; i < nodesToAnimate.length; i++){\r\n      let nodeRow = nodesToAnimate[i].row;\r\n      let nodeCol = nodesToAnimate[i].col\r\n      setTimeout(() => {\r\n        //const node = nodesToAnimate[i];\r\n       // node.status = type;\r\n       terrain.grid[nodeRow][nodeCol].status = \"wall\";\r\n       terrain.grid[nodeRow][nodeCol].reward = -100;\r\n       terrain.grid[nodeRow][nodeCol].visits = -1;\r\n      tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [props.worldProperties.colors.wall]);\r\n      }, timerDelay * i);\r\n      props.stopMazeSelection();\r\n    }\r\n  }\r\n return (\r\n    <mesh ref={mesh} position={[0, 0, 0]}>\r\n      <gridHelper args={[300, props.gridDimensions, 0x5c78bd, 0x5c78bd]} />\r\n      <mesh \r\n        rotation={[-Math.PI / 2, 0, 0]} \r\n        position={[0, -0.1, 0]} \r\n        receiveShadow={true}\r\n        onPointerDown={(e) => {\r\n          mouseIsUp = false;\r\n          mouseDownHandler(e);\r\n        }}\r\n        onPointerUp={e => {\r\n          if (props.resetStatus === true || mouseIsUp === true) {\r\n            mouseIsUp = true;\r\n          }\r\n          mouseUpHandler(e);\r\n        }}\r\n        onPointerMove={e => {\r\n          if (mouseIsUp === true || props.resetStatus === false) {\r\n            return;\r\n          }\r\n          else if (mouseIsUp === false) {\r\n            currentHoverNodeId = Math.floor(e.faceIndex / 2);\r\n            return;\r\n          }\r\n        }}\r\n      >\r\n        <primitive attach='geometry' object={groundGeometry} />  \r\n        <primitive attach='material' object={groundMaterial} />   \r\n      </mesh>\r\n      <axesHelper />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default Grid;"]},"metadata":{},"sourceType":"module"}